#
# Patryk Zawadzki <patrys@pld-linux.org>, 2010.
msgid ""
msgstr ""
"Project-Id-Version: git\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2010-06-07 13:35+0200\n"
"PO-Revision-Date: 2010-06-07 14:14+0200\n"
"Last-Translator: Patryk Zawadzki <patrys@pld-linux.org>\n"
"Language-Team: polski <patrys@pld-linux.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Translate Toolkit 1.7.0\n"
"Plural-Forms: nplurals=4; plural=(n==0 ? 0 : n==1 ? 1 : n%10>=2 && n%10<=4 "
"&& (n%100<10 || n%100>=20) ? 2 : 3);\n"

#: 01-chapter2.markdown:1
msgid "# Git Basics #"
msgstr "# Podstawy Gita #"

#: 01-chapter2.markdown:3
msgid ""
"If you can read only one chapter to get going with Git, this is it. This "
"chapter covers every basic command you need to do the vast majority of the "
"things you’ll eventually spend your time doing with Git. By the end of the "
"chapter, you should be able to configure and initialize a repository, begin "
"and stop tracking files, and stage and commit changes. We’ll also show you "
"how to set up Git to ignore certain files and file patterns, how to undo "
"mistakes quickly and easily, how to browse the history of your project and "
"view changes between commits, and how to push and pull from remote "
"repositories."
msgstr ""
"Jeśli chcesz ograniczyć się do czytania jednego rozdziału, dobrze trafiłeś. "
"Niniejszy rozdział obejmuje wszystkie podstawowe komendy, które musisz znać, "
"aby wykonać przeważającą część zadań, z którymi przyjdzie ci spędzić czas "
"podczas pracy z Gitem. Po zapoznaniu się z rozdziałem powinieneś umieć "
"samodzielnie tworzyć i konfigurować repozytoria, rozpoczynać i kończyć "
"śledzenie plików, umieszczać zmiany w poczekalni oraz je zatwierdzać. "
"Pokażemy ci także, jak skonfigurować Gita tak, aby ignorował pewne pliki "
"oraz całe ich grupy według zadanego wzorca, szybko i łatwo cofać błędne "
"zmiany, przeglądać historię swojego projektu, podglądać zmiany pomiędzy "
"rewizjami, oraz jak wypychać je na serwer i stamtąd pobierać."

#: 01-chapter2.markdown:5
msgid "## Getting a Git Repository ##"
msgstr "## Pierwsze repozytorium Gita ##"

#: 01-chapter2.markdown:7
msgid ""
"You can get a Git project using two main approaches. The first takes an "
"existing project or directory and imports it into Git. The second clones an "
"existing Git repository from another server."
msgstr ""
"Projekt Gita możesz rozpocząć w dwojaki sposób. Pierwsza metoda używa "
"istniejącego projektu lub katalogu i importuje go do Gita. Druga polega na "
"sklonowaniu istniejącego repozytorium z innego serwera."

#: 01-chapter2.markdown:9
msgid "### Initializing a Repository in an Existing Directory ###"
msgstr "### Inicjalizacja Gita w istniejącym katalogu ###"

#: 01-chapter2.markdown:11
msgid ""
"If you’re starting to track an existing project in Git, you need to go to "
"the project’s directory and type"
msgstr ""
"Jeśli chcesz rozpocząć śledzenie zmian w plikach istniejącego projektu, "
"musisz przejść do katalogu projektu i wykonać"

#: 01-chapter2.markdown:13
msgid "\t$ git init"
msgstr "\t$ git init"

#: 01-chapter2.markdown:15
msgid ""
"This creates a new subdirectory named .git that contains all of your "
"necessary repository files — a Git repository skeleton. At this point, "
"nothing in your project is tracked yet. (See Chapter 9 for more information "
"about exactly what files are contained in the `.git` directory you just "
"created.)"
msgstr ""
"Powyższa komenda stworzy nowy podkatalog o nazwie .git, zawierający "
"wszystkie niezbędne pliki — szkielet repozytorium Gita. W tym momencie żadna "
"część twojego projektu nie jest jeszcze śledzona. (Zajrzyj do Rozdziału 9. "
"aby dowiedzieć się, jakie dokładnie pliki są przechowywane w podkatalogu `."
"git`, który właśnie utworzyłeś)."

#: 01-chapter2.markdown:17
msgid ""
"If you want to start version-controlling existing files (as opposed to an "
"empty directory), you should probably begin tracking those files and do an "
"initial commit. You can accomplish that with a few git add commands that "
"specify the files you want to track, followed by a commit:"
msgstr ""
"Aby rozpocząć kontrolę wersji istniejących plików (w przeciwieństwie do "
"pustego katalogu), najprawdopodobniej powinieneś rozpocząć ich śledzenie i "
"utworzyć początkową rewizję. Możesz tego dokonać kilkoma komendami add "
"(dodaj) wybierając pojedyncze pliki, które chcesz śledzić, a następnie "
"zatwierdzając zmiany poleceniem `commit`:"

#: 01-chapter2.markdown:19
msgid ""
"\t$ git add *.c\n"
"\t$ git add README\n"
"\t$ git commit –m 'initial project version'"
msgstr ""
"\t$ git add *.c\n"
"\t$ git add README\n"
"\t$ git commit -m 'initial project version'"

#: 01-chapter2.markdown:23
msgid ""
"We’ll go over what these commands do in just a minute. At this point, you "
"have a Git repository with tracked files and an initial commit."
msgstr ""
"Za chwilę zobaczymy dokładnie, co wymienione polecenia robią. W tym jednak "
"momencie masz już własne repozytorium Gita, śledzące wybrane pliki i "
"zawierające pierwsze zatwierdzone zmiany (początkową rewizję)."

#: 01-chapter2.markdown:25
msgid "### Cloning an Existing Repository ###"
msgstr "### Klonowanie istniejącego repozytorium ###"

#: 01-chapter2.markdown:27
msgid ""
"If you want to get a copy of an existing Git repository — for example, a "
"project you’d like to contribute to — the command you need is git clone. If "
"you’re familiar with other VCS systems such as Subversion, you’ll notice "
"that the command is clone and not checkout. This is an important distinction "
"— Git receives a copy of nearly all data that the server has. Every version "
"of every file for the history of the project is pulled down when you run "
"`git clone`. In fact, if your server disk gets corrupted, you can use any of "
"the clones on any client to set the server back to the state it was in when "
"it was cloned (you may lose some server-side hooks and such, but all the "
"versioned data would be there—see Chapter 4 for more details)."
msgstr ""
"Jeżeli chcesz uzyskać kopię istniejącego już repozytorium Gita — na przykład "
"projektu, w którym chciałbyś zacząć się udzielać i wprowadzać własne zmiany "
"— komenda, której potrzebujesz to `clone`. Jeżeli znasz już inne systemy "
"kontroli wersji, jak np. Subversion, zauważysz z pewnością, że w przypadku "
"Gita używana komenda to `clone` a nie `checkout`. Jest to istotne "
"rozróżnienie — Git pobiera kopię niemalże wszystkich danych posiadanych "
"przez serwer. Po wykonaniu polecenia `git clone` zostanie pobrana każda "
"rewizja, każdego pliku w historii projektu. W praktyce nawet jeśli dysk "
"serwera zostanie uszkodzony, możesz użyć któregokolwiek z dostępnych klonów "
"aby przywrócić serwer do stanu w jakim był w momencie klonowania (możesz "
"utracić pewne hooki skonfigurowane na serwerze i tym podobne, ale wszystkie "
"poddane kontroli wersji pliki będą spójne — zajrzyj do Rozdziału 4. aby "
"poznać więcej szczegółów)."

#: 01-chapter2.markdown:29
msgid ""
"You clone a repository with `git clone [url]`. For example, if you want to "
"clone the Ruby Git library called Grit, you can do so like this:"
msgstr ""
"Repozytorium klonujesz używając polecenia `git clone [URL]`. Na przykład "
"jeśli chcesz sklonować bibliotekę Rubiego do Gita o nazwie Grit, możesz to "
"zrobić wywołując:"

#: 01-chapter2.markdown:31
msgid "\t$ git clone git://github.com/schacon/grit.git"
msgstr "\t$ git clone git://github.com/schacon/grit.git"

#: 01-chapter2.markdown:33
msgid ""
"That creates a directory named \"grit\", initializes a `.git` directory "
"inside it, pulls down all the data for that repository, and checks out a "
"working copy of the latest version. If you go into the new `grit` directory, "
"you’ll see the project files in there, ready to be worked on or used. If you "
"want to clone the repository into a directory named something other than "
"grit, you can specify that as the next command-line option:"
msgstr ""
"Tworzony jest katalog o nazwie „grit”, następnie wewnątrz niego inicjowany "
"jest podkatalog `.git`, pobierane są wszystkie dane z repozytorium, a kopia "
"robocza przełączona zostaje na ostatnią wersję. Jeśli wejdziesz do świeżo "
"utworzonego katalogu `grit`, zobaczysz wewnątrz pliki projektu, gotowe do "
"użycia i pracy z nimi. Jeśli chcesz sklonować repozytorium do katalogu o "
"nazwie innej niż `grit`, możesz to zrobić podając w wierszu poleceń kolejną "
"opcję:"

#: 01-chapter2.markdown:35
msgid "\t$ git clone git://github.com/schacon/grit.git mygrit"
msgstr "\t$ git clone git://github.com/schacon/grit.git mygrit"

#: 01-chapter2.markdown:37
msgid ""
"That command does the same thing as the previous one, but the target "
"directory is called mygrit."
msgstr ""
"Powyższa komenda robi dokładnie to samo, co poprzednia, ale wszystkie pliki "
"umieszcza w katalogu `mygrit`."

#: 01-chapter2.markdown:39
msgid ""
"Git has a number of different transfer protocols you can use. The previous "
"example uses the `git://` protocol, but you may also see `http(s)://` or "
"`user@server:/path.git`, which uses the SSH transfer protocol. Chapter 4 "
"will introduce all of the available options the server can set up to access "
"your Git repository and the pros and cons of each."
msgstr ""
"Git oferuje do wyboru zestaw różnych protokołów transmisji. Poprzedni "
"przykład używa protokołu `git://`, ale możesz także spotkać `http(s)://` lub "
"`uzytkownik@serwer:/sciezka.git`, używające protokołu SSH. W Rozdziale 4. "
"omówimy wszystkie dostępne możliwości konfiguracji dostępu do repozytorium "
"Gita na serwerze oraz zalety i wady każdej z nich."

#: 01-chapter2.markdown:41
msgid "## Recording Changes to the Repository ##"
msgstr "## Rejestrowanie zmian w repozytorium ##"

#: 01-chapter2.markdown:43
msgid ""
"You have a bona fide Git repository and a checkout or working copy of the "
"files for that project. You need to make some changes and commit snapshots "
"of those changes into your repository each time the project reaches a state "
"you want to record."
msgstr ""
"Posiadasz już repozytorium Gita i ostatnią wersję lub kopię roboczą "
"wybranego projektu. Za każdym razem, kiedy po naniesieniu zmian projekt "
"osiągnie stan, który chcesz zapamiętać, musisz nowe wersje plików "
"zatwierdzić w swoim repozytorium."

#: 01-chapter2.markdown:45
msgid ""
"Remember that each file in your working directory can be in one of two "
"states: tracked or untracked. Tracked files are files that were in the last "
"snapshot; they can be unmodified, modified, or staged. Untracked files are "
"everything else - any files in your working directory that were not in your "
"last snapshot and are not in your staging area.  When you first clone a "
"repository, all of your files will be tracked and unmodified because you "
"just checked them out and haven’t edited anything. "
msgstr ""
"Pamiętaj, że każdy plik w twoim katalogu roboczym może być w jednym z dwóch "
"stanów: śledzony lub nieśledzony. Śledzone pliki to te, które znalazły się w "
"ostatniej migawce; mogą być niezmodyfikowane, zmodyfikowane lub oczekiwać w "
"poczekalni. Nieśledzone pliki to cała reszta — są to jakiekolwiek pliki w "
"twoim katalogu roboczym, które nie znalazły się w ostatniej migawce i nie "
"znajdują się w poczekalni, gotowe do zatwierdzenia. Początkowo, kiedy "
"klonujesz repozytorium, wszystkie twoje pliki będą śledzone i "
"niezmodyfikowane, ponieważ dopiero co zostały wybrane i nie zmieniałeś "
"jeszcze niczego."

#: 01-chapter2.markdown:47
msgid ""
"As you edit files, Git sees them as modified, because you’ve changed them "
"since your last commit. You stage these modified files and then commit all "
"your staged changes, and the cycle repeats. This lifecycle is illustrated in "
"Figure 2-1."
msgstr ""
"Kiedy zmieniasz pliki, Git rozpoznaje je jako zmodyfikowane, ponieważ różnią "
"się od ostatniej zatwierdzonej zmiany. Zmodyfikowane pliki umieszczasz w "
"poczekalni, a następnie zatwierdzasz oczekujące tam zmiany i tak powtarza "
"się cały cykl. Przedstawia go Diagram 2-1."

#: 01-chapter2.markdown:49
msgid ""
"Insert 18333fig0201.png \n"
"Figure 2-1. The lifecycle of the status of your files."
msgstr ""
"Insert 18333fig0201.png \n"
"Diagram 2-1. Cykl życia stanu twoich plików."

#: 01-chapter2.markdown:52
msgid "### Checking the Status of Your Files ###"
msgstr "### Sprawdzanie stanu twoich plików ###"

#: 01-chapter2.markdown:54
msgid ""
"The main tool you use to determine which files are in which state is the git "
"status command. If you run this command directly after a clone, you should "
"see something like this:"
msgstr ""
"Podstawowe narzędzie używane do sprawdzenia stanu plików to polecenie `git "
"status`. Jeśli uruchomisz je bezpośrednio po sklonowaniu repozytorium, "
"zobaczysz wynik podobny do poniższego:"

#: 01-chapter2.markdown:56
msgid ""
"\t$ git status\n"
"\t# On branch master\n"
"\tnothing to commit (working directory clean)"
msgstr ""
"\t$ git status\n"
"\t# On branch master\n"
"\tnothing to commit (working directory clean)"

#: 01-chapter2.markdown:60
msgid ""
"This means you have a clean working directory—in other words, there are no "
"tracked and modified files. Git also doesn’t see any untracked files, or "
"they would be listed here. Finally, the command tells you which branch "
"you’re on. For now, that is always master, which is the default; you won’t "
"worry about it here. The next chapter will go over branches and references "
"in detail."
msgstr ""
"Oznacza to, że posiadasz czysty katalog roboczy — innymi słowy nie zawiera "
"on śledzonych i zmodyfikowanych plików. Git nie widzi także żadnych plików "
"nieśledzonych, w przeciwnym wypadku wyświetliłby ich listę. W końcu "
"polecenie pokazuje również gałąź, na której aktualnie pracujesz. Póki co, "
"jest to zawsze master, wartość domyślna; nie martw się tym jednak teraz. "
"Następny rozdział w szczegółach omawia gałęzie oraz odniesienia."

#: 01-chapter2.markdown:62
msgid ""
"Let’s say you add a new file to your project, a simple README file. If the "
"file didn’t exist before, and you run `git status`, you see your untracked "
"file like so:"
msgstr ""
"Powiedzmy, że dodajesz do repozytorium nowy plik, prosty plik README. Jeżeli "
"nie istniał on wcześniej, po uruchomieniu `git status` zobaczysz go jako "
"plik nieśledzony, jak poniżej:"

#: 01-chapter2.markdown:64
msgid ""
"\t$ vim README\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Untracked files:\n"
"\t#   (use \"git add <file>...\" to include in what will be committed)\n"
"\t#\n"
"\t#\tREADME\n"
"\tnothing added to commit but untracked files present (use \"git add\" to "
"track)"
msgstr ""
"\t$ vim README\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Untracked files:\n"
"\t#   (use \"git add <file>...\" to include in what will be committed)\n"
"\t#\n"
"\t#\tREADME\n"
"\tnothing added to commit but untracked files present (use \"git add\" to "
"track)"

#: 01-chapter2.markdown:73
msgid ""
"You can see that your new README file is untracked, because it’s under the "
"“Untracked files” heading in your status output. Untracked basically means "
"that Git sees a file you didn’t have in the previous snapshot (commit); Git "
"won’t start including it in your commit snapshots until you explicitly tell "
"it to do so. It does this so you don’t accidentally begin including "
"generated binary files or other files that you did not mean to include. You "
"do want to start including README, so let’s start tracking the file."
msgstr ""
"Widać, że twój nowy plik README nie jest jeszcze śledzony, ponieważ znajduje "
"się pod nagłówkiem „Untracked files” (Nieśledzone pliki) w informacji o "
"stanie. Nieśledzony oznacza, że Git widzi plik, którego nie miałeś w "
"poprzedniej migawce (zatwierdzonej kopii); Git nie zacznie umieszczać go w "
"przyszłych migawkach, dopóki sam mu tego nie polecisz. Zachowuje się tak, by "
"uchronić cię od przypadkowego umieszczenia w migawkach wyników działania "
"programu lub innych plików, których nie miałeś zamiaru tam dodawać. W tym "
"przypadku chcesz, aby README został uwzględniony, więc zacznijmy go śledzić."

#: 01-chapter2.markdown:75
msgid "### Tracking New Files ###"
msgstr "### Śledzenie nowych plików ###"

#: 01-chapter2.markdown:77
msgid ""
"In order to begin tracking a new file, you use the command `git add`. To "
"begin tracking the README file, you can run this:"
msgstr ""
"Aby rozpocząć śledzenie nowego pliku, użyj polecenia `git add`. Aby zacząć "
"śledzić plik README, możesz wykonać:"

#: 01-chapter2.markdown:79
msgid "\t$ git add README"
msgstr "\t$ git add README"

#: 01-chapter2.markdown:81
msgid ""
"If you run your status command again, you can see that your README file is "
"now tracked and staged:"
msgstr ""
"Jeśli uruchomisz teraz ponownie polecenie `status`, zobaczysz, że twój plik "
"README jest już śledzony i znalazł się w poczekalni:"

#: 01-chapter2.markdown:83
msgid ""
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#"
msgstr ""
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#"

#: 01-chapter2.markdown:91
msgid ""
"You can tell that it’s staged because it’s under the “Changes to be "
"committed” heading. If you commit at this point, the version of the file at "
"the time you ran git add is what will be in the historical snapshot. You may "
"recall that when you ran git init earlier, you then ran git add (files) — "
"that was to begin tracking files in your directory. The git add command "
"takes a path name for either a file or a directory; if it’s a directory, the "
"command adds all the files in that directory recursively."
msgstr ""
"Widać, że jest w poczekalni, ponieważ znajduje się pod nagłówkiem „Changes "
"to be commited“ (Zmiany do zatwierdzenia). Jeśli zatwierdzisz zmiany w tym "
"momencie, jako migawka w historii zostanie zapisana wersja pliku z momentu "
"wydania polecenia `git add`. Być może pamiętasz, że po uruchomieniu `git "
"init` wydałeś polecenie `git add (pliki)` — miało to na celu rozpoczęcie ich "
"śledzenia. Polecenie `git add` bierze jako parametr ścieżkę do pliku lub "
"katalogu; jeśli jest to katalog, polecenie dodaje wszystkie pliki z tego "
"katalogu i podkatalogów."

#: 01-chapter2.markdown:93
msgid "### Staging Modified Files ###"
msgstr "### Dodawanie zmodyfikowanych plików do poczekalni ###"

#: 01-chapter2.markdown:95
msgid ""
"Let’s change a file that was already tracked. If you change a previously "
"tracked file called `benchmarks.rb` and then run your `status` command "
"again, you get something that looks like this:"
msgstr ""
"Zmodyfikujmy teraz plik, który był już śledzony. Jeśli zmienisz śledzony "
"wcześniej plik o nazwie `benchmarks.rb`, a następnie uruchomisz polecenie "
"`status`, zobaczysz coś podobnego:"

#: 01-chapter2.markdown:97
msgctxt "01-chapter2.markdown:97"
msgid ""
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:110
msgid ""
"The benchmarks.rb file appears under a section named “Changed but not "
"updated” — which means that a file that is tracked has been modified in the "
"working directory but not yet staged. To stage it, you run the `git add` "
"command (it’s a multipurpose command — you use it to begin tracking new "
"files, to stage files, and to do other things like marking merge-conflicted "
"files as resolved). Let’s run `git add` now to stage the benchmarks.rb file, "
"and then run `git status` again:"
msgstr ""
"Plik `benchmarks.rb` pojawia się w sekcji „Changed but bit "
"updated“ (Zmienione ale nie zaktualizowane), co oznacza, że śledzony plik "
"został zmodyfikowany, ale zmiany nie trafiły jeszcze do poczekalni. Aby je "
"tam wysłać, uruchom polecenie `git add` (jest to wielozadaniowe polecenie — "
"używa się go do rozpoczynania śledzenia nowych plików, umieszczania ich w "
"poczekalni, oraz innych zadań, takich jak oznaczanie rozwiązanych konfliktów "
"scalania). Uruchom zatem `git add` by umieścić `benchmarks.rb` w poczekalni, "
"a następnie ponownie wykonaj `git status`:"

#: 01-chapter2.markdown:112
msgctxt "01-chapter2.markdown:112"
msgid ""
"\t$ git add benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git add benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:122
msgid ""
"Both files are staged and will go into your next commit. At this point, "
"suppose you remember one little change that you want to make in benchmarks."
"rb before you commit it. You open it again and make that change, and you’re "
"ready to commit. However, let’s run `git status` one more time:"
msgstr ""
"Oba pliki znajdują się już w poczekalni i zostaną uwzględnione podczas "
"kolejnego zatwierdzenie zmian. Załóżmy, że w tym momencie przypomniałeś "
"sobie o dodatkowej małej zmianie, którą koniecznie chcesz wprowadzić do "
"pliku `benchmarks.rb` jeszcze przed zatwierdzeniem. Otwierasz go zatem, "
"wprowadzasz zmianę i jesteś gotowy do zatwierdzenia. Uruchom jednak `git "
"status` raz jeszcze:"

#: 01-chapter2.markdown:124
msgid ""
"\t$ vim benchmarks.rb \n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ vim benchmarks.rb \n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:139
msgid ""
"What the heck? Now benchmarks.rb is listed as both staged and unstaged. How "
"is that possible? It turns out that Git stages a file exactly as it is when "
"you run the git add command. If you commit now, the version of benchmarks.rb "
"as it was when you last ran the git add command is how it will go into the "
"commit, not the version of the file as it looks in your working directory "
"when you run git commit. If you modify a file after you run `git add`, you "
"have to run `git add` again to stage the latest version of the file:"
msgstr ""
"Co do licha? Plik `benchmarks.rb` widnieje teraz jednocześnie w poczekalni i "
"poza nią. Jak to możliwe? Okazuje się, że Git umieszcza plik w poczekalni "
"dokładnie z taką zawartością, jak w momencie uruchomienia polecenia `git "
"add`. Jeśli w tej chwili zatwierdzisz zmiany, zostanie użyta wersja "
"`benchmarks.rb` dokładnie z momentu uruchomienia polecenia `git add`, nie "
"zaś ta, którą widzisz w katalogu roboczym w momencie wydania polecenia `git "
"commit`. Jeśli modyfikujesz plik po uruchomieniu `git add`, musisz ponownie "
"użyć `git add`, aby najnowsze zmiany zostały umieszczone w poczekalni:"

#: 01-chapter2.markdown:141
msgctxt "01-chapter2.markdown:141"
msgid ""
"\t$ git add benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git add benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:151
msgid "### Ignoring Files ###"
msgstr "### Ignorowanie plików ###"

#: 01-chapter2.markdown:153
msgid ""
"Often, you’ll have a class of files that you don’t want Git to automatically "
"add or even show you as being untracked. These are generally automatically "
"generated files such as log files or files produced by your build system. In "
"such cases, you can create a file listing patterns to match them named ."
"gitignore.  Here is an example .gitignore file:"
msgstr ""
"Często spotkasz się z klasą plików, w przypadku których nie chcesz, by Git "
"automatycznie dodawał je do repozytorium, czy nawet pokazywał je jako "
"nieśledzone. Są to ogólnie pliki generowane automatycznie, takie jak "
"dzienniki zdarzeń, czy pliki tworzone w czasie budowania projektu. W takich "
"wypadkach tworzysz plik zawierający listę wzorców do nich pasujących i "
"nazywasz go `.gitignore`. Poniżej znajdziesz przykładowy plik `.gitignore`:"

#: 01-chapter2.markdown:155
msgid ""
"\t$ cat .gitignore\n"
"\t*.[oa]\n"
"\t*~"
msgstr ""
"\t$ cat .gitignore\n"
"\t*.[oa]\n"
"\t*~"

#: 01-chapter2.markdown:159
msgid ""
"The first line tells Git to ignore any files ending in .o or .a — object and "
"archive files that may be the product of building your code. The second line "
"tells Git to ignore all files that end with a tilde (`~`), which is used by "
"many text editors such as Emacs to mark temporary files. You may also "
"include a log, tmp, or pid directory; automatically generated documentation; "
"and so on. Setting up a .gitignore file before you get going is generally a "
"good idea so you don’t accidentally commit files that you really don’t want "
"in your Git repository."
msgstr ""
"Pierwsza linia mówi Gitowi, by ignorował pliki kończące się na .o lub .a — "
"pliki obiektów i archiwa, które mogą być produktem kompilacji kodu. Druga "
"linia mówi Gitowi, żeby pomijał również wszystkie pliki, które nazwy kończą "
"się tyldą (`~`), której to używa wiele edytorów tekstu, takich jak Emacs, do "
"oznaczania plików tymczasowych. Możesz też dołączyć katalog log, tmp lub "
"pid, automatycznie wygenerowaną dokumentację itp. Zajęcie się plikiem `."
"gitignore` jeszcze przed przystąpieniem do pracy jest zwykle dobrym pomysłem "
"i pozwoli ci uniknąć przypadkowego dodania do repozytorium Git niechcianych "
"plików."

#: 01-chapter2.markdown:161
msgid ""
"The rules for the patterns you can put in the .gitignore file are as follows:"
msgstr ""
"Zasady przetwarzania wyrażeń, które możesz umieścić w pliku `.gitignore` są "
"następujące:"

#: 01-chapter2.markdown:163
msgid ""
"*\tBlank lines or lines starting with # are ignored.\n"
"*\tStandard glob patterns work.\n"
"*\tYou can end patterns with a forward slash (`/`) to specify a directory.\n"
"*\tYou can negate a pattern by starting it with an exclamation point (`!`)."
msgstr ""
"*\tPuste linie lub linie rozpoczynające się od # są ignorowane.\n"
"*\tDziałają standardowe wyrażenia glob.\n"
"*\tMożesz zakończyć wyrażenie znakiem ukośnika (`/`) aby sprecyzować, że "
"chodzi o katalog.\n"
"*\tMożesz negować wyrażenia rozpoczynając je wykrzyknikiem (`!`)."

#: 01-chapter2.markdown:168
msgid ""
"Glob patterns are like simplified regular expressions that shells use. An "
"asterisk (`*`) matches zero or more characters; `[abc]` matches any "
"character inside the brackets (in this case a, b, or c); a question mark (`?"
"`) matches a single character; and brackets enclosing characters separated "
"by a hyphen(`[0-9]`) matches any character between them (in this case 0 "
"through 9) . "
msgstr ""
"Wyrażenia glob są jak uproszczone wyrażenia regularne, używane przez "
"powłokę. Gwiazdka (`*`) dopasowuje zero lub więcej znaków; `[abc]` "
"dopasowuje dowolny znak znajdujący się wewnątrz nawiasu kwadratowego (w tym "
"przypadku a, b lub c); znak zapytania (`?`) dopasowuje pojedynczy znak; "
"nawias kwadratowy zawierający znaki rozdzielone myślnikiem (`[0-9]`) "
"dopasowuje dowolny znajdujący się pomiędzy nimi znak (w tym przypadku od 0 "
"do 9)."

#: 01-chapter2.markdown:170
msgid "Here is another example .gitignore file:"
msgstr "Poniżej znajdziesz kolejny przykład pliku `.gitignore`:"

#: 01-chapter2.markdown:172
msgid ""
"\t# a comment – this is ignored\n"
"\t*.a       # no .a files\n"
"\t!lib.a    # but do track lib.a, even though you're ignoring .a files "
"above\n"
"\t/TODO     # only ignore the root TODO file, not subdir/TODO\n"
"\tbuild/    # ignore all files in the build/ directory\n"
"\tdoc/*.txt # ignore doc/notes.txt, but not doc/server/arch.txt"
msgstr ""
"\t# komentarz — ta linia jest ignorowana\n"
"\t*.a       # żadnych plików .a\n"
"\t!lib.a    # ale uwzględniaj lib.a, pomimo ignorowania .a w linijce "
"powyżej\n"
"\t/TODO     # ignoruj plik TODO w katalogu głównym, ale nie podkatalog/TODO\n"
"\tbuild/    # ignoruj wszystkie pliki znajdujące się w katalogu build/\n"
"\tdoc/*.txt # ignoruj doc/notatki.txt, ale nie doc/server/arch.txt"

#: 01-chapter2.markdown:179
msgid "### Viewing Your Staged and Unstaged Changes ###"
msgstr "### Podgląd zmian w poczekalni i poza nią ###"

#: 01-chapter2.markdown:181
msgid ""
"If the `git status` command is too vague for you — you want to know exactly "
"what you changed, not just which files were changed — you can use the `git "
"diff` command. We’ll cover `git diff` in more detail later; but you’ll "
"probably use it most often to answer these two questions: What have you "
"changed but not yet staged? And what have you staged that you are about to "
"commit? Although `git status` answers those questions very generally, `git "
"diff` shows you the exact lines added and removed — the patch, as it were. "
msgstr ""
"Jeśli polecenie `git status` jest dla ciebie zbyt nieprecyzyjne — chcesz "
"wiedzieć, co dokładnie zmieniłeś, nie zaś, które pliki zostały zmienione — "
"możesz użyć polecenia `git diff`. W szczegółach zajmiemy się nim później; "
"prawdopodobnie najczęściej będziesz używał go aby uzyskać odpowiedź na dwa "
"pytania: Co zmieniłeś, ale jeszcze nie trafiło do poczekalni? Oraz, co "
"znajduje się już w poczekalni, a co za chwilę zostanie zatwierdzone? Choć "
"`git status` bardzo ogólnie odpowiada na oba te pytania, `git diff` "
"pokazuje, które dokładnie linie zostały dodane, a które usunięte — w postaci "
"łatki."

#: 01-chapter2.markdown:183
msgid ""
"Let’s say you edit and stage the README file again and then edit the "
"benchmarks.rb file without staging it. If you run your `status` command, you "
"once again see something like this:"
msgstr ""
"Powiedzmy, że zmieniłeś i ponownie dodałeś do poczekalni plik README, a "
"następnie zmodyfikowałeś plik `benchmarks.rb`, jednak bez umieszczania go "
"wśród oczekujących. Jeśli uruchomisz teraz polecenie `status`, zobaczysz coś "
"podobnego:"

#: 01-chapter2.markdown:185
msgctxt "01-chapter2.markdown:185"
msgid ""
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#\tnew file:   README\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:198
msgid ""
"To see what you’ve changed but not yet staged, type `git diff` with no other "
"arguments:"
msgstr ""
"Aby zobaczyć, co zmieniłeś ale nie wysłałeś do poczekalni, wpisz `git diff` "
"bez żadnych argumentów:"

#: 01-chapter2.markdown:200
msgid ""
"\t$ git diff\n"
"\tdiff --git a/benchmarks.rb b/benchmarks.rb\n"
"\tindex 3cb747f..da65585 100644\n"
"\t--- a/benchmarks.rb\n"
"\t+++ b/benchmarks.rb\n"
"\t@@ -36,6 +36,10 @@ def main\n"
"\t           @commit.parents[0].parents[0].parents[0]\n"
"\t         end"
msgstr ""
"\t$ git diff\n"
"\tdiff --git a/benchmarks.rb b/benchmarks.rb\n"
"\tindex 3cb747f..da65585 100644\n"
"\t--- a/benchmarks.rb\n"
"\t+++ b/benchmarks.rb\n"
"\t@@ -36,6 +36,10 @@ def main\n"
"\t           @commit.parents[0].parents[0].parents[0]\n"
"\t         end"

#: 01-chapter2.markdown:209
msgid ""
"\t+        run_code(x, 'commits 1') do\n"
"\t+          git.commits.size\n"
"\t+        end\n"
"\t+\n"
"\t         run_code(x, 'commits 2') do\n"
"\t           log = git.commits('master', 15)\n"
"\t           log.size"
msgstr ""
"\t+        run_code(x, 'commits 1') do\n"
"\t+          git.commits.size\n"
"\t+        end\n"
"\t+\n"
"\t         run_code(x, 'commits 2') do\n"
"\t           log = git.commits('master', 15)\n"
"\t           log.size"

#: 01-chapter2.markdown:217
msgid ""
"That command compares what is in your working directory with what is in your "
"staging area. The result tells you the changes you’ve made that you haven’t "
"yet staged."
msgstr ""
"Powyższe polecenie porównuje zawartość katalogu roboczego z tym, co znajduje "
"się w poczekalni. Wynik pokaże ci te zmiany, które nie trafiły jeszcze do "
"poczekalni."

#: 01-chapter2.markdown:219
msgid ""
"If you want to see what you’ve staged that will go into your next commit, "
"you can use `git diff –-cached`. (In Git versions 1.6.1 and later, you can "
"also use `git diff –-staged`, which may be easier to remember.) This command "
"compares your staged changes to your last commit:"
msgstr ""
"Jeśli chcesz zobaczyć zawartość poczekalni, która trafi do repozytorium z "
"najbliższym zatwierdzeniem, możesz użyć polecenia `git diff --cached`. (Git "
"w wersji 1.6.1 i późniejszych pozawala użyć polecenia `git diff --staged`, "
"które może być łatwiejsze do zapamiętania). To polecenie porówna zmiany z "
"poczekalni z ostatnią migawką:"

#: 01-chapter2.markdown:221
msgid ""
"\t$ git diff --cached\n"
"\tdiff --git a/README b/README\n"
"\tnew file mode 100644\n"
"\tindex 0000000..03902a1\n"
"\t--- /dev/null\n"
"\t+++ b/README2\n"
"\t@@ -0,0 +1,5 @@\n"
"\t+grit\n"
"\t+ by Tom Preston-Werner, Chris Wanstrath\n"
"\t+ http://github.com/mojombo/grit\n"
"\t+\n"
"\t+Grit is a Ruby library for extracting information from a Git repository"
msgstr ""
"\t$ git diff --cached\n"
"\tdiff --git a/README b/README\n"
"\tnew file mode 100644\n"
"\tindex 0000000..03902a1\n"
"\t--- /dev/null\n"
"\t+++ b/README2\n"
"\t@@ -0,0 +1,5 @@\n"
"\t+grit\n"
"\t+ by Tom Preston-Werner, Chris Wanstrath\n"
"\t+ http://github.com/mojombo/grit\n"
"\t+\n"
"\t+Grit is a Ruby library for extracting information from a Git repository"

#: 01-chapter2.markdown:234
msgid ""
"It’s important to note that `git diff` by itself doesn’t show all changes "
"made since your last commit — only changes that are still unstaged. This can "
"be confusing, because if you’ve staged all of your changes, `git diff` will "
"give you no output."
msgstr ""
"Istotnym jest, że samo polecenie `git diff` nie pokazuje wszystkich zmian "
"dokonanych od ostatniego zatwierdzenia — ­jedynie te, które nie trafiły do "
"poczekalni. Może być to nieco mylące, ponieważ jeżeli wszystkie twoje zmiany "
"są już w poczekalni, wynik `git diff` będzie pusty."

#: 01-chapter2.markdown:236
msgid ""
"For another example, if you stage the benchmarks.rb file and then edit it, "
"you can use `git diff` to see the changes in the file that are staged and "
"the changes that are unstaged:"
msgstr ""
"Jeszcze jeden przykład — jeżeli wyślesz do poczekalni plik `benchmarks.rb`, "
"a następnie zmodyfikujesz go ponownie, możesz użyć `git status`, by obejrzeć "
"zmiany znajdujące się w poczekalni, jak i te poza nią:"

#: 01-chapter2.markdown:238
msgid ""
"\t$ git add benchmarks.rb\n"
"\t$ echo '# test line' >> benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changes to be committed:\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git add benchmarks.rb\n"
"\t$ echo '# test line' >> benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changes to be committed:\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:252
msgid "Now you can use `git diff` to see what is still unstaged"
msgstr "Teraz możesz użyć `git diff`, by zobaczyć zmiany spoza poczekalni"

#: 01-chapter2.markdown:254
msgid ""
"\t$ git diff \n"
"\tdiff --git a/benchmarks.rb b/benchmarks.rb\n"
"\tindex e445e28..86b2f7c 100644\n"
"\t--- a/benchmarks.rb\n"
"\t+++ b/benchmarks.rb\n"
"\t@@ -127,3 +127,4 @@ end\n"
"\t main()"
msgstr ""
"\t$ git diff \n"
"\tdiff --git a/benchmarks.rb b/benchmarks.rb\n"
"\tindex e445e28..86b2f7c 100644\n"
"\t--- a/benchmarks.rb\n"
"\t+++ b/benchmarks.rb\n"
"\t@@ -127,3 +127,4 @@ end\n"
"\t main()"

#: 01-chapter2.markdown:262
msgid ""
"\t ##pp Grit::GitRuby.cache_client.stats \n"
"\t+# test line"
msgstr ""
"\t ##pp Grit::GitRuby.cache_client.stats \n"
"\t+# test line"

#: 01-chapter2.markdown:265
msgid "and `git diff --cached` to see what you’ve staged so far:"
msgstr ""
"oraz `git diff --cached`, aby zobaczyć zmiany wysłane dotąd do poczekalni:"

#: 01-chapter2.markdown:267
msgid ""
"\t$ git diff --cached\n"
"\tdiff --git a/benchmarks.rb b/benchmarks.rb\n"
"\tindex 3cb747f..e445e28 100644\n"
"\t--- a/benchmarks.rb\n"
"\t+++ b/benchmarks.rb\n"
"\t@@ -36,6 +36,10 @@ def main\n"
"\t          @commit.parents[0].parents[0].parents[0]\n"
"\t        end"
msgstr ""
"\t$ git diff --cached\n"
"\tdiff --git a/benchmarks.rb b/benchmarks.rb\n"
"\tindex 3cb747f..e445e28 100644\n"
"\t--- a/benchmarks.rb\n"
"\t+++ b/benchmarks.rb\n"
"\t@@ -36,6 +36,10 @@ def main\n"
"\t          @commit.parents[0].parents[0].parents[0]\n"
"\t        end"

#: 01-chapter2.markdown:276
msgid ""
"\t+        run_code(x, 'commits 1') do\n"
"\t+          git.commits.size\n"
"\t+        end\n"
"\t+              \n"
"\t        run_code(x, 'commits 2') do\n"
"\t          log = git.commits('master', 15)\n"
"\t          log.size"
msgstr ""
"\t+        run_code(x, 'commits 1') do\n"
"\t+          git.commits.size\n"
"\t+        end\n"
"\t+              \n"
"\t        run_code(x, 'commits 2') do\n"
"\t          log = git.commits('master', 15)\n"
"\t          log.size"

#: 01-chapter2.markdown:284
msgid "### Committing Your Changes ###"
msgstr "### Zatwierdzanie zmian ###"

#: 01-chapter2.markdown:286
msgid ""
"Now that your staging area is set up the way you want it, you can commit "
"your changes. Remember that anything that is still unstaged — any files you "
"have created or modified that you haven’t run `git add` on since you edited "
"them — won’t go into this commit. They will stay as modified files on your "
"disk.\n"
"In this case, the last time you ran `git status`, you saw that everything "
"was staged, so you’re ready to commit your changes. The simplest way to "
"commit is to type `git commit`:"
msgstr ""
"Teraz, kiedy twoja poczekalnia zawiera dokładnie to, co powinna, możesz "
"zatwierdzić swoje zmiany. Pamiętaj, że wszystko czego nie ma jeszcze w "
"poczekalni — każdy plik, który utworzyłeś lub zmodyfikowałeś, a na którym "
"później nie uruchomiłeś polecenia `git add` — nie zostanie uwzględnione "
"wśród zatwierdzanych zmian. Pozostanie wyłącznie w postaci zmodyfikowanych "
"plików na twoim dysku.\n"
"W tym wypadku, kiedy ostatnio uruchamiałeś `git status`, zobaczyłeś, że "
"wszystkie twoje zmiany są już w poczekalni, więc jesteś gotowy do ich "
"zatwierdzenia. Najprostszy sposób zatwierdzenia zmian to wpisanie `git "
"commit`:"

#: 01-chapter2.markdown:289
msgid "\t$ git commit"
msgstr "\t$ git commit"

#: 01-chapter2.markdown:291
msgid ""
"Doing so launches your editor of choice. (This is set by your shell’s `"
"$EDITOR` environment variable — usually vim or emacs, although you can "
"configure it with whatever you want using the `git config --global core."
"editor` command as you saw in Chapter 1). "
msgstr ""
"Zostanie uruchomiony wybrany przez ciebie edytor tekstu. (Wybiera się go za "
"pośrednictwem zmiennej środowiskową `$EDITOR` — zazwyczaj jest to vim lub "
"emacs, możesz jednak wybrać własną aplikację używając polecenia `git config "
"--global core.editor`, które poznałeś w Rozdziale 1.)."

#: 01-chapter2.markdown:293
msgid "The editor displays the following text (this example is a Vim screen):"
msgstr ""
"Edytor zostanie otwarty z następującym tekstem (poniższy przykład pokazuje "
"ekran Vima):"

#: 01-chapter2.markdown:295
msgid ""
"\t# Please enter the commit message for your changes. Lines starting\n"
"\t# with '#' will be ignored, and an empty message aborts the commit.\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       new file:   README\n"
"\t#       modified:   benchmarks.rb \n"
"\t~\n"
"\t~\n"
"\t~\n"
"\t\".git/COMMIT_EDITMSG\" 10L, 283C"
msgstr ""
"\t# Please enter the commit message for your changes. Lines starting\n"
"\t# with '#' will be ignored, and an empty message aborts the commit.\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       new file:   README\n"
"\t#       modified:   benchmarks.rb \n"
"\t~\n"
"\t~\n"
"\t~\n"
"\t\".git/COMMIT_EDITMSG\" 10L, 283C"

#: 01-chapter2.markdown:308
msgid ""
"You can see that the default commit message contains the latest output of "
"the `git status` command commented out and one empty line on top. You can "
"remove these comments and type your commit message, or you can leave them "
"there to help you remember what you’re committing. (For an even more "
"explicit reminder of what you’ve modified, you can pass the `-v` option to "
"`git commit`. Doing so also puts the diff of your change in the editor so "
"you can see exactly what you did.) When you exit the editor, Git creates "
"your commit with that commit message (with the comments and diff stripped "
"out)."
msgstr ""
"Jak widzisz, domyślny opis zmian zawiera aktualny wynik polecenia `git "
"status` w postaci komentarza oraz jedną pustą linię na samej górze. Możesz "
"usunąć komentarze i wpisać własny opis, lub pozostawić je, co pomoże "
"zapamiętać zakres zatwierdzonych zmian. (Aby uzyskać jeszcze precyzyjniejsze "
"przypomnienie, możesz przekazać do `git commit` parametr `-v`. Jeśli to "
"zrobisz, do komentarza trafią również poszczególne zmodyfikowane wiersze, "
"pokazując, co dokładnie zrobiłeś.). Po opuszczeniu edytora, Git stworzy nową "
"migawkę opatrzoną twoim opisem zmian (uprzednio usuwając z niego komentarze "
"i podsumowanie zmian)."

#: 01-chapter2.markdown:310
msgid ""
"Alternatively, you can type your commit message inline with the `commit` "
"command by specifying it after a -m flag, like this:"
msgstr ""
"Alternatywnie opis rewizji możesz podać już wydając polecenie `commit`, "
"poprzedzając go flagą `-m`, jak poniżej:"

#: 01-chapter2.markdown:312
msgid ""
"\t$ git commit -m \"Story 182: Fix benchmarks for speed\"\n"
"\t[master]: created 463dc4f: \"Fix benchmarks for speed\"\n"
"\t 2 files changed, 3 insertions(+), 0 deletions(-)\n"
"\t create mode 100644 README"
msgstr ""
"\t$ git commit -m \"Story 182: Fix benchmarks for speed\"\n"
"\t[master]: created 463dc4f: \"Fix benchmarks for speed\"\n"
"\t 2 files changed, 3 insertions(+), 0 deletions(-)\n"
"\t create mode 100644 README"

#: 01-chapter2.markdown:317
msgid ""
"Now you’ve created your first commit! You can see that the commit has given "
"you some output about itself: which branch you committed to (master), what "
"SHA-1 checksum the commit has (`463dc4f`), how many files were changed, and "
"statistics about lines added and removed in the commit."
msgstr ""
"Właśnie zatwierdziłeś swoje pierwsze zmiany! Sama operacja rewizji zwróciła "
"dodatkowo garść informacji, między innymi, gałąź do której dorzuciłeś zmiany "
"(master), ich sumę kontrolną SHA-1 (`463dc4f`), ilość zmienionych plików "
"oraz statystyki dodanych i usuniętych linii kodu."

#: 01-chapter2.markdown:319
msgid ""
"Remember that the commit records the snapshot you set up in your staging "
"area. Anything you didn’t stage is still sitting there modified; you can do "
"another commit to add it to your history. Every time you perform a commit, "
"you’re recording a snapshot of your project that you can revert to or "
"compare to later."
msgstr ""
"Pamiętaj, że operacja commit zapamiętała migawkę zmian z poczekalni. "
"Wszystko czego nie dodałeś do poczekalni, ciągle czeka zmienione w swoim "
"miejscu - możesz to uwzględnić przy następnym zatwierdzaniu zmian. "
"Każdorazowe wywołanie polecenia `git commit` powoduje zapamiętanie migawki "
"projektu, którą możesz następnie odtworzyć albo porównać do innej migawki."

#: 01-chapter2.markdown:321
msgid "### Skipping the Staging Area ###"
msgstr "### Pomijanie poczekalni ###"

#: 01-chapter2.markdown:323
msgid ""
"Although it can be amazingly useful for crafting commits exactly how you "
"want them, the staging area is sometimes a bit more complex than you need in "
"your workflow. If you want to skip the staging area, Git provides a simple "
"shortcut. Providing the `-a` option to the `git commit` command makes Git "
"automatically stage every file that is already tracked before doing the "
"commit, letting you skip the `git add` part:"
msgstr ""
"Chociaż poczekalnia może być niesamowicie przydatna przy ustalaniu rewizji "
"dokładnie takich, jakimi chcesz je mieć później w historii, czasami możesz "
"uznać ją za odrobinę zbyt skomplikowaną aniżeli wymaga tego twoja praca. "
"Jeśli chcesz pominąć poczekalnię, Git udostępnia prosty skrót. Po dodaniu do "
"składni polecenia `git commit` opcji `-a` każdy zmieniony plik, który jest "
"już śledzony, automatycznie trafi do poczekalni, dzięki czemu pominiesz "
"część `git add`:"

#: 01-chapter2.markdown:325
msgid ""
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#\n"
"\t$ git commit -a -m 'added new benchmarks'\n"
"\t[master 83e38c7] added new benchmarks\n"
"\t 1 files changed, 5 insertions(+), 0 deletions(-)"
msgstr ""
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#\n"
"\t#\tmodified:   benchmarks.rb\n"
"\t#\n"
"\t$ git commit -a -m 'added new benchmarks'\n"
"\t[master 83e38c7] added new benchmarks\n"
"\t 1 files changed, 5 insertions(+), 0 deletions(-)"

#: 01-chapter2.markdown:336
msgid ""
"Notice how you don’t have to run `git add` on the benchmarks.rb file in this "
"case before you commit."
msgstr ""
"Zauważ, że w tym wypadku przed zatwierdzeniem zmian i wykonaniem rewizji nie "
"musiałeś uruchamiać `git add` na pliku banchmark.rb."

#: 01-chapter2.markdown:338
msgid "### Removing Files ###"
msgstr "### Usuwanie plików ###"

#: 01-chapter2.markdown:340
msgid ""
"To remove a file from Git, you have to remove it from your tracked files "
"(more accurately, remove it from your staging area) and then commit. The "
"`git rm` command does that and also removes the file from your working "
"directory so you don’t see it as an untracked file next time around."
msgstr ""
"Aby usunąć plik z Gita, należy najpierw wyrzucić go ze zbioru plików "
"śledzonych (a dokładniej usunąć go z poczekalni), a następnie zatwierdzić "
"zmiany. Polecenie `git -rm` służy właśnie do tego, a dodatkowo usuwa plik z "
"katalogu roboczego, zatem przy kolejnej okazji nie zobaczysz go w sekcji "
"plików nieśledzonych."

#: 01-chapter2.markdown:342
msgid ""
"If you simply remove the file from your working directory, it shows up under "
"the “Changed but not updated” (that is, _unstaged_) area of your `git "
"status` output:"
msgstr ""
"Jeżeli po prostu usuniesz plik z katalogu roboczego, pokaże się on w części "
"„Changed but not updated” (Zmienione, ale nie zaktualizowane, czyli poza "
"poczekalnią) wyniku polecenia `git status`:"

#: 01-chapter2.markdown:344
msgid ""
"\t$ rm grit.gemspec\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add/rm <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#       deleted:    grit.gemspec\n"
"\t#"
msgstr ""
"\t$ rm grit.gemspec\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add/rm <file>...\" to update what will be committed)\n"
"\t#\n"
"\t#       deleted:    grit.gemspec\n"
"\t#"

#: 01-chapter2.markdown:354
msgid "Then, if you run `git rm`, it stages the file’s removal:"
msgstr ""
"Jeśli później wydasz polecenie `git rm`, doda ono do poczekalni operację "
"usunięcia pliku:"

#: 01-chapter2.markdown:356
msgid ""
"\t$ git rm grit.gemspec\n"
"\trm 'grit.gemspec'\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       deleted:    grit.gemspec\n"
"\t#"
msgstr ""
"\t$ git rm grit.gemspec\n"
"\trm 'grit.gemspec'\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t#\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       deleted:    grit.gemspec\n"
"\t#"

#: 01-chapter2.markdown:367
msgid ""
"The next time you commit, the file will be gone and no longer tracked. If "
"you modified the file and added it to the index already, you must force the "
"removal with the `-f` option. This is a safety feature to prevent accidental "
"removal of data that hasn’t yet been recorded in a snapshot and that can’t "
"be recovered from Git."
msgstr ""
"Kiedy następnym razem zatwierdzisz zmiany, plik zniknie i nie będzie dłużej "
"śledzony. Jeśli wcześniej zmodyfikowałeś plik i dodałeś go do indeksu "
"oczekujących, musisz wymusić usunięcie opcją `-f`. Jest to forma "
"zabezpieczenia, chroniąca cię przed przypadkowym usunięciem danych, które "
"nie zostały jeszcze zapamiętane w żadnej migawce i których nie da się "
"odzyskać za pomocą Gita."

#: 01-chapter2.markdown:369
msgid ""
"Another useful thing you may want to do is to keep the file in your working "
"tree but remove it from your staging area. In other words, you may want to "
"keep the file on your hard drive but not have Git track it anymore. This is "
"particularly useful if you forgot to add something to your `.gitignore` file "
"and accidentally added it, like a large log file or a bunch of `.a` compiled "
"files. To do this, use the `--cached` option:"
msgstr ""
"Kolejną użyteczną funkcją, na której używanie możesz się zdecydować, jest "
"możliwość zachowania pliku w drzewie roboczym pomimo usunięcia go z "
"poczekalni. Innymi słowy, możesz zatrzymać plik na dysku, ale nie chcieć, by "
"Git nadal go śledził. Jest to szczególnie przydatne w sytuacji, gdy "
"zapomniałeś dodać czegoś do `.gitignore` i przez przypadek umieściłeś w "
"poczekalni np. duży plik dziennika lub garść skompilowanych plików `.a`. By "
"to zrobić, posłuż się opcją `--cached`:"

#: 01-chapter2.markdown:371
msgid "\t$ git rm --cached readme.txt"
msgstr "\t$ git rm --cached readme.txt"

#: 01-chapter2.markdown:373
msgid ""
"You can pass files, directories, and file-glob patterns to the `git rm` "
"command. That means you can do things such as"
msgstr ""
"Do komendy `git -rm` możesz przekazywać pliki, katalogi lub wyrażenia glob - "
"możesz na przykład napisać coś takiego:"

#: 01-chapter2.markdown:375
msgid "\t$ git rm log/\\*.log"
msgstr "\t$ git rm log/\\*.log"

#: 01-chapter2.markdown:377
msgid ""
"Note the backslash (`\\`) in front of the `*`. This is necessary because Git "
"does its own filename expansion in addition to your shell’s filename "
"expansion. This command removes all files that have the `.log` extension in "
"the `log/` directory. Or, you can do something like this:"
msgstr ""
"Zwróć uwagę na odwrotny ukośnik (`\\`) na początku `*`. Jest on niezbędny "
"gdyż Git dodatkowo do tego co robi powłoka, sam ewaluuje sobie nazwy plików. "
"Przywołane polecenie usuwa wszystkie pliki z rozszerzeniem `.log`, "
"znajdujące się w katalogu `log/`. Możesz także wywołać następującą komendę:"

#: 01-chapter2.markdown:379
msgid "\t$ git rm \\*~"
msgstr "\t$ git rm \\*~"

#: 01-chapter2.markdown:381
msgid "This command removes all files that end with `~`."
msgstr "Usuwa ona wszystkie pliki, które kończą się tyldą `~`.\t"

#: 01-chapter2.markdown:383
msgid "### Moving Files ###"
msgstr "### Przenoszenie plików ###"

#: 01-chapter2.markdown:385
msgid ""
"Unlike many other VCS systems, Git doesn’t explicitly track file movement. "
"If you rename a file in Git, no metadata is stored in Git that tells it you "
"renamed the file. However, Git is pretty smart about figuring that out after "
"the fact — we’ll deal with detecting file movement a bit later."
msgstr ""
"W odróżnieniu do wielu innych systemów kontroli wersji, Git nie śledzi "
"bezpośrednio przesunięć plików. Nie przechowuje on żadnych metadanych, które "
"mogłyby mu pomóc w rozpoznawaniu operacji zmiany nazwy śledzonych plików. "
"Jednakże, Git jest całkiem sprytny jeżeli chodzi o rozpoznawanie tego po "
"fakcie - zajmiemy się tym tematem odrobinę dalej."

#: 01-chapter2.markdown:387
msgid ""
"Thus it’s a bit confusing that Git has a `mv` command. If you want to rename "
"a file in Git, you can run something like"
msgstr ""
"Nieco mylący jest fakt, że Git posiada polecenie `mv`. Służy ono do zmiany "
"nazwy pliku w repozytorium, np."

#: 01-chapter2.markdown:389
msgid "\t$ git mv file_from file_to"
msgstr "\t$ git mv file_from file_to"

#: 01-chapter2.markdown:391
msgid ""
"and it works fine. In fact, if you run something like this and look at the "
"status, you’ll see that Git considers it a renamed file:"
msgstr ""
"W rzeczywistości, uruchomienie takiego polecenia spowoduje, że Git zapamięta "
"w poczekalni operację zmiany nazwy - możesz to sprawdzić wyświetlając wynik "
"operacji status:"

#: 01-chapter2.markdown:393
msgid ""
"\t$ git mv README.txt README\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Your branch is ahead of 'origin/master' by 1 commit.\n"
"\t#\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       renamed:    README.txt -> README\n"
"\t#"
msgstr ""
"\t$ git mv README.txt README\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Your branch is ahead of 'origin/master' by 1 commit.\n"
"\t#\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       renamed:    README.txt -> README\n"
"\t#"

#: 01-chapter2.markdown:404
msgid "However, this is equivalent to running something like this:"
msgstr "Jest to równoważne z uruchomieniem poleceń:\t"

#: 01-chapter2.markdown:406
msgid ""
"\t$ mv README.txt README\n"
"\t$ git rm README.txt\n"
"\t$ git add README"
msgstr ""
"\t$ mv README.txt README\n"
"\t$ git rm README.txt\n"
"\t$ git add README"

#: 01-chapter2.markdown:410
msgid ""
"Git figures out that it’s a rename implicitly, so it doesn’t matter if you "
"rename a file that way or with the `mv` command. The only real difference is "
"that `mv` is one command instead of three — it’s a convenience function. "
"More important, you can use any tool you like to rename a file, and address "
"the add/rm later, before you commit."
msgstr ""
"Git rozpozna w tym przypadku, że jest to operacja zmiany nazwy - nie ma "
"zatem znaczenia, czy zmienisz ją w ten czy opisany wcześniej (`mv`) sposób. "
"Jedyna realna różnica polega na tym, że `mv` to jedno polecenie zamiast "
"trzech - kwestia wygody. Co ważniejsze, samą nazwę możesz zmienić dowolnym "
"narzędziem a resztą zajmą się już polecenia add i rm których musisz użyć "
"przed zatwierdzeniem zmian."

#: 01-chapter2.markdown:412
msgid "## Viewing the Commit History ##"
msgstr "## Podgląd historii rewizji ##"

#: 01-chapter2.markdown:414
msgid ""
"After you have created several commits, or if you have cloned a repository "
"with an existing commit history, you’ll probably want to look back to see "
"what has happened. The most basic and powerful tool to do this is the `git "
"log` command."
msgstr ""
"Po kilku rewizjach, lub w przypadku sklonowanego repozytorium zawierającego "
"już własną historię, przyjdzie czas, że będziesz chciał spojrzeć w "
"przeszłość i sprawdzić dokonane zmiany. Najprostszym, a zarazem "
"najsilniejszym, służącym do tego narzędziem jest `git log`."

#: 01-chapter2.markdown:416
msgid ""
"These examples use a very simple project called simplegit that I often use "
"for demonstrations. To get the project, run "
msgstr ""
"Poniższe przykłady operują na moim, bardzo prostym, demonstracyjnym "
"projekcie o nazwie simplegit. Aby go pobrać uruchom:"

#: 01-chapter2.markdown:418
msgid "\tgit clone git://github.com/schacon/simplegit-progit.git"
msgstr "\tgit clone git://github.com/schacon/simplegit-progit.git"

#: 01-chapter2.markdown:420
msgid ""
"When you run `git log` in this project, you should get output that looks "
"something like this:"
msgstr ""
"Jeśli teraz uruchomisz na sklonowanym repozytorium polecenie `git log`, "
"uzyskasz mniej więcej coś takiego:"

#: 01-chapter2.markdown:422
msgid ""
"\t$ git log\n"
"\tcommit ca82a6dff817ec66f44342007202690a93763949\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Mar 17 21:52:11 2008 -0700"
msgstr ""
"\t$ git log\n"
"\tcommit ca82a6dff817ec66f44342007202690a93763949\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Mar 17 21:52:11 2008 -0700"

#: 01-chapter2.markdown:427
msgctxt "01-chapter2.markdown:427"
msgid "\t    changed the version number"
msgstr "\t    changed the version number"

#: 01-chapter2.markdown:429
msgctxt "01-chapter2.markdown:429"
msgid ""
"\tcommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 16:40:33 2008 -0700"
msgstr ""
"\tcommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 16:40:33 2008 -0700"

#: 01-chapter2.markdown:433
msgctxt "01-chapter2.markdown:433"
msgid "\t    removed unnecessary test code"
msgstr "\t    removed unnecessary test code"

#: 01-chapter2.markdown:435
msgctxt "01-chapter2.markdown:435"
msgid ""
"\tcommit a11bef06a3f659402fe7563abf99ad00de2209e6\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 10:31:28 2008 -0700"
msgstr ""
"\tcommit a11bef06a3f659402fe7563abf99ad00de2209e6\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 10:31:28 2008 -0700"

#: 01-chapter2.markdown:439
msgctxt "01-chapter2.markdown:439"
msgid "\t    first commit"
msgstr "\t    first commit"

#: 01-chapter2.markdown:441
msgid ""
"By default, with no arguments, `git log` lists the commits made in that "
"repository in reverse chronological order. That is, the most recent commits "
"show up first. As you can see, this command lists each commit with its SHA-1 "
"checksum, the author’s name and e-mail, the date written, and the commit "
"message."
msgstr ""
"Domyślnie, polecenie `git log` uruchomione bez argumentów, listuje zmiany "
"zatwierdzone w tym repozytorium w odwrotnej kolejności chronologicznej, "
"czyli pokazując najnowsze zmiany w pierwszej kolejności. Jak widzisz "
"polecenie wyświetliło zmiany wraz z ich sumą kontrolną SHA-1, nazwiskiem "
"oraz e-mailem autora, datą zapisu oraz notką zmiany."

#: 01-chapter2.markdown:443
msgid ""
"A huge number and variety of options to the `git log` command are available "
"to show you exactly what you’re looking for. Here, we’ll show you some of "
"the most-used options."
msgstr ""
"Duża liczba opcji polecenia `git log` oraz ich różnorodność pozwalają na "
"dokładne wybranie interesujących nas informacji. Za chwilę przedstawimy "
"najważniejsze i najczęściej używane spośród nich."

#: 01-chapter2.markdown:445
msgid ""
"One of the more helpful options is `-p`, which shows the diff introduced in "
"each commit. You can also use `-2`, which limits the output to only the last "
"two entries:"
msgstr ""
"Jedną z najprzydatniejszych opcji jest `-p`. Pokazuje ona różnice "
"wprowadzone z każdą rewizją. Dodatkowo możesz użyć opcji `-2` aby ograniczyć "
"zbiór do dwóch ostatnich wpisów:"

#: 01-chapter2.markdown:447
msgid ""
"\t$ git log –p -2\n"
"\tcommit ca82a6dff817ec66f44342007202690a93763949\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Mar 17 21:52:11 2008 -0700"
msgstr ""
"\t$ git log â€“p -2\n"
"\tcommit ca82a6dff817ec66f44342007202690a93763949\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Mar 17 21:52:11 2008 -0700"

#: 01-chapter2.markdown:452
msgctxt "01-chapter2.markdown:452"
msgid "\t    changed the version number"
msgstr "\t    changed the version number"

#: 01-chapter2.markdown:454
msgid ""
"\tdiff --git a/Rakefile b/Rakefile\n"
"\tindex a874b73..8f94139 100644\n"
"\t--- a/Rakefile\n"
"\t+++ b/Rakefile\n"
"\t@@ -5,7 +5,7 @@ require 'rake/gempackagetask'\n"
"\t spec = Gem::Specification.new do |s|\n"
"\t-    s.version   =   \"0.1.0\"\n"
"\t+    s.version   =   \"0.1.1\"\n"
"\t     s.author    =   \"Scott Chacon\""
msgstr ""
"\tdiff --git a/Rakefile b/Rakefile\n"
"\tindex a874b73..8f94139 100644\n"
"\t--- a/Rakefile\n"
"\t+++ b/Rakefile\n"
"\t@@ -5,7 +5,7 @@ require 'rake/gempackagetask'\n"
"\t spec = Gem::Specification.new do |s|\n"
"\t-    s.version   =   \"0.1.0\"\n"
"\t+    s.version   =   \"0.1.1\"\n"
"\t     s.author    =   \"Scott Chacon\""

#: 01-chapter2.markdown:464
msgctxt "01-chapter2.markdown:464"
msgid ""
"\tcommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 16:40:33 2008 -0700"
msgstr ""
"\tcommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 16:40:33 2008 -0700"

#: 01-chapter2.markdown:468
msgctxt "01-chapter2.markdown:468"
msgid "\t    removed unnecessary test code"
msgstr "\t    removed unnecessary test code"

#: 01-chapter2.markdown:470
msgid ""
"\tdiff --git a/lib/simplegit.rb b/lib/simplegit.rb\n"
"\tindex a0a60ae..47c6340 100644\n"
"\t--- a/lib/simplegit.rb\n"
"\t+++ b/lib/simplegit.rb\n"
"\t@@ -18,8 +18,3 @@ class SimpleGit\n"
"\t     end"
msgstr ""
"\tdiff --git a/lib/simplegit.rb b/lib/simplegit.rb\n"
"\tindex a0a60ae..47c6340 100644\n"
"\t--- a/lib/simplegit.rb\n"
"\t+++ b/lib/simplegit.rb\n"
"\t@@ -18,8 +18,3 @@ class SimpleGit\n"
"\t     end"

#: 01-chapter2.markdown:477
msgid ""
"\t end\n"
"\t-\n"
"\t-if $0 == __FILE__\n"
"\t-  git = SimpleGit.new\n"
"\t-  puts git.show\n"
"\t-end\n"
"\t\\ No newline at end of file"
msgstr ""
"\t end\n"
"\t-\n"
"\t-if $0 == __FILE__\n"
"\t-  git = SimpleGit.new\n"
"\t-  puts git.show\n"
"\t-end\n"
"\t\\ No newline at end of file"

#: 01-chapter2.markdown:485
msgid ""
"This option displays the same information but with a diff directly following "
"each entry. This is very helpful for code review or to quickly browse what "
"happened during a series of commits that a collaborator has added.\n"
"You can also use a series of summarizing options with `git log`. For "
"example, if you want to see some abbreviated stats for each commit, you can "
"use the `--stat` option:"
msgstr ""
"Opcja spowodowała wyświetlenie tych samych informacji z tą różnicą, że "
"bezpośrednio po każdym wpisie został pokazywany tzw. diff, czyli różnica. "
"Jest to szczególnie przydatne podczas recenzowania kodu albo szybkiego "
"przeglądania zmian dokonanych przez twojego współpracownika.\n"
"Dodatkowo możesz skorzystać z całej serii opcji podsumowujących wynik "
"działania `git log`. Na przykład, aby zobaczyć skrócone statystyki każdej z "
"zatwierdzonych zmian, użyj opcji `--stat`:"

#: 01-chapter2.markdown:488
msgid ""
"\t$ git log --stat \n"
"\tcommit ca82a6dff817ec66f44342007202690a93763949\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Mar 17 21:52:11 2008 -0700"
msgstr ""
"\t$ git log --stat \n"
"\tcommit ca82a6dff817ec66f44342007202690a93763949\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Mar 17 21:52:11 2008 -0700"

#: 01-chapter2.markdown:493
msgctxt "01-chapter2.markdown:493"
msgid "\t    changed the version number"
msgstr "\t    changed the version number"

#: 01-chapter2.markdown:495
msgid ""
"\t Rakefile |    2 +-\n"
"\t 1 files changed, 1 insertions(+), 1 deletions(-)"
msgstr ""
"\t Rakefile |    2 +-\n"
"\t 1 files changed, 1 insertions(+), 1 deletions(-)"

#: 01-chapter2.markdown:498
msgctxt "01-chapter2.markdown:498"
msgid ""
"\tcommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 16:40:33 2008 -0700"
msgstr ""
"\tcommit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 16:40:33 2008 -0700"

#: 01-chapter2.markdown:502
msgctxt "01-chapter2.markdown:502"
msgid "\t    removed unnecessary test code"
msgstr "\t    removed unnecessary test code"

#: 01-chapter2.markdown:504
msgid ""
"\t lib/simplegit.rb |    5 -----\n"
"\t 1 files changed, 0 insertions(+), 5 deletions(-)"
msgstr ""
"\t lib/simplegit.rb |    5 -----\n"
"\t 1 files changed, 0 insertions(+), 5 deletions(-)"

#: 01-chapter2.markdown:507
msgctxt "01-chapter2.markdown:507"
msgid ""
"\tcommit a11bef06a3f659402fe7563abf99ad00de2209e6\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 10:31:28 2008 -0700"
msgstr ""
"\tcommit a11bef06a3f659402fe7563abf99ad00de2209e6\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sat Mar 15 10:31:28 2008 -0700"

#: 01-chapter2.markdown:511
msgctxt "01-chapter2.markdown:511"
msgid "\t    first commit"
msgstr "\t    first commit"

#: 01-chapter2.markdown:513
msgid ""
"\t README           |    6 ++++++\n"
"\t Rakefile         |   23 +++++++++++++++++++++++\n"
"\t lib/simplegit.rb |   25 +++++++++++++++++++++++++\n"
"\t 3 files changed, 54 insertions(+), 0 deletions(-)"
msgstr ""
"\t README           |    6 ++++++\n"
"\t Rakefile         |   23 +++++++++++++++++++++++\n"
"\t lib/simplegit.rb |   25 +++++++++++++++++++++++++\n"
"\t 3 files changed, 54 insertions(+), 0 deletions(-)"

#: 01-chapter2.markdown:518
msgid ""
"As you can see, the `--stat` option prints below each commit entry a list of "
"modified files, how many files were changed, and how many lines in those "
"files were added and removed. It also puts a summary of the information at "
"the end.\n"
"Another really useful option is `--pretty`. This option changes the log "
"output to formats other than the default. A few prebuilt options are "
"available for you to use. The oneline option prints each commit on a single "
"line, which is useful if you’re looking at a lot of commits. In addition, "
"the `short`, `full`, and `fuller` options show the output in roughly the "
"same format but with less or more information, respectively:"
msgstr ""
"Jak widzisz, `--stat` wyświetlił pod każdym wpisem historii listę "
"zmodyfikowanych plików, liczbę zmienionych plików oraz liczbę dodanych i "
"usuniętych linii. Dodatkowo, opcja dołożyła podobne podsumowanie wszystkich "
"informacji na samym końcu wyniku.\n"
"Kolejnym bardzo przydatnym parametrem jest `--pretty`. Pokazuje on wynik "
"polecenia log w nowym, innym niż domyślny formacie. Możesz skorzystać z "
"kilku pre-definiowanych wariantów. Opcja `oneline` wyświetla każdą "
"zatwierdzoną zmianę w pojedynczej linii, co szczególnie przydaje się podczas "
"wyszukiwania w całym gąszczu zmian. Dodatkowo, `short`, `full` oraz `fuller` "
"pokazują wynik w mniej więcej tym samym formacie ale odpowiednio z odrobiną "
"więcej lub mniej informacji:"

#: 01-chapter2.markdown:521
msgid ""
"\t$ git log --pretty=oneline\n"
"\tca82a6dff817ec66f44342007202690a93763949 changed the version number\n"
"\t085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code\n"
"\ta11bef06a3f659402fe7563abf99ad00de2209e6 first commit"
msgstr ""
"\t$ git log --pretty=oneline\n"
"\tca82a6dff817ec66f44342007202690a93763949 changed the version number\n"
"\t085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test code\n"
"\ta11bef06a3f659402fe7563abf99ad00de2209e6 first commit"

#: 01-chapter2.markdown:526
msgid ""
"The most interesting option is `format`, which allows you to specify your "
"own log output format. This is especially useful when you’re generating "
"output for machine parsing — because you specify the format explicitly, you "
"know it won’t change with updates to Git:"
msgstr ""
"Najbardziej interesująca jest tutaj jednak opcja `format`. Pozwala ona "
"określić własny wygląd i format informacji wyświetlanych poleceniem log. "
"Funkcja przydaje się szczególnie podczas generowania tychże informacji do "
"dalszego, maszynowego przetwarzania - ponieważ sam definiujesz ściśle "
"format, wiesz, że nie zmieni się on wraz z kolejnymi wersjami Gita:"

#: 01-chapter2.markdown:528
msgid ""
"\t$ git log --pretty=format:\"%h - %an, %ar : %s\"\n"
"\tca82a6d - Scott Chacon, 11 months ago : changed the version number\n"
"\t085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code\n"
"\ta11bef0 - Scott Chacon, 11 months ago : first commit"
msgstr ""
"\t$ git log --pretty=format:\"%h - %an, %ar : %s\"\n"
"\tca82a6d - Scott Chacon, 11 months ago : changed the version number\n"
"\t085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code\n"
"\ta11bef0 - Scott Chacon, 11 months ago : first commit"

#: 01-chapter2.markdown:533
msgid "Table 2-1 lists some of the more useful options that format takes."
msgstr ""
"Tabela 2-1 pokazuje najprzydatniejsze opcje akceptowane przez `format`."

#: 01-chapter2.markdown:535
msgid ""
"\tOption\tDescription of Output\n"
"\t%H\tCommit hash\n"
"\t%h\tAbbreviated commit hash\n"
"\t%T\tTree hash\n"
"\t%t\tAbbreviated tree hash\n"
"\t%P\tParent hashes\n"
"\t%p\tAbbreviated parent hashes\n"
"\t%an\tAuthor name\n"
"\t%ae\tAuthor e-mail\n"
"\t%ad\tAuthor date (format respects the –date= option)\n"
"\t%ar\tAuthor date, relative\n"
"\t%cn\tCommitter name\n"
"\t%ce\tCommitter email\n"
"\t%cd\tCommitter date\n"
"\t%cr\tCommitter date, relative\n"
"\t%s\tSubject"
msgstr ""
"\tOpcja\tOpis\n"
"\t%H\tSuma kontrolna zmiany\n"
"\t%h\tSkrócona suma kontrolna zmiany\n"
"\t%T\tSuma kontrolna drzewa\n"
"\t%t\tSkrócona suma kontrolna drzewa\n"
"\t%P\tSumy kontrolne rodziców\n"
"\t%p\tSkrócone sumy kontrolne rodziców\n"
"\t%an\tNazwisko autora\n"
"\t%ae\tAdres e-mail autora\n"
"\t%ad\tData autora (format respektuje opcję -date=)\n"
"\t%ar\tWzględna data autora\n"
"\t%cn\tNazwisko zatwierdzającego zmiany\n"
"\t%ce\tAdres e-mail zatwierdzającego zmiany\n"
"\t%cd\tData zatwierdzającego zmiany\n"
"\t%cr\tData zatwierdzającego zmiany, względna\n"
"\t%s\tTemat"

#: 01-chapter2.markdown:552
msgid ""
"You may be wondering what the difference is between _author_ and "
"_committer_. The author is the person who originally wrote the work, whereas "
"the committer is the person who last applied the work. So, if you send in a "
"patch to a project and one of the core members applies the patch, both of "
"you get credit — you as the author and the core member as the committer. "
"We’ll cover this distinction a bit more in Chapter 5."
msgstr ""
"Pewnie zastanawiasz się jaka jest różnica pomiędzy _autorem_ a "
"_zatwierdzającym_zmiany_. Autor to osoba, która oryginalnie stworzyła pracę "
"a zatwierdzający zmiany to osoba, która ostatnia wprowadziła modyfikacje do "
"drzewa. Jeśli zatem wysyłasz do projektu łatkę a następnie któryś z jego "
"członków nanosi ją na projekt, oboje zastajecie zapisani w historii - ty "
"jako autor, a członek zespołu jako osoba zatwierdzająca. Powiemy więcej o "
"tym rozróżnieniu w rozdziale 5."

#: 01-chapter2.markdown:554
msgid ""
"The oneline and format options are particularly useful with another `log` "
"option called `--graph`. This option adds a nice little ASCII graph showing "
"your branch and merge history, which we can see our copy of the Grit project "
"repository:"
msgstr ""
"Wspomniana już wcześniej opcja `oneline` jest szczególnie przydatna w parze "
"z z inną, a mianowicie, `--graph`. Tworzy ona mały, śliczny graf ASCII "
"pokazujący historię gałęzi oraz scaleń, co w pełnej krasie można zobaczyć na "
"kopii repozytorium Grita:"

#: 01-chapter2.markdown:556
msgid ""
"\t$ git log --pretty=format:\"%h %s\" --graph\n"
"\t* 2d3acf9 ignore errors from SIGCHLD on trap\n"
"\t*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n"
"\t|\\  \n"
"\t| * 420eac9 Added a method for getting the current branch.\n"
"\t* | 30e367c timeout code and tests\n"
"\t* | 5a09431 add timeout protection to grit\n"
"\t* | e1193f8 support for heads with slashes in them\n"
"\t|/  \n"
"\t* d6016bc require time for xmlschema\n"
"\t*  11d191e Merge branch 'defunkt' into local"
msgstr ""
"\t$ git log --pretty=format:\"%h %s\" --graph\n"
"\t* 2d3acf9 ignore errors from SIGCHLD on trap\n"
"\t*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit\n"
"\t|\\  \n"
"\t| * 420eac9 Added a method for getting the current branch.\n"
"\t* | 30e367c timeout code and tests\n"
"\t* | 5a09431 add timeout protection to grit\n"
"\t* | e1193f8 support for heads with slashes in them\n"
"\t|/  \n"
"\t* d6016bc require time for xmlschema\n"
"\t*  11d191e Merge branch 'defunkt' into local"

#: 01-chapter2.markdown:568
msgid ""
"Those are only some simple output-formatting options to `git log` — there "
"are many more. Table 2-2 lists the options we’ve covered so far and some "
"other common formatting options that may be useful, along with how they "
"change the output of the log command."
msgstr ""
"Są to jedynie podstawowe opcje formatowania wyjścia polecenia `git log` - "
"jest ich znacznie więcej. Tabela 2-2 uwzględnia zarówno te które już "
"poznałeś oraz inne, często wykorzystywane, wraz ze opisem każdej z nich."

#: 01-chapter2.markdown:570
msgid ""
"\tOption\tDescription\n"
"\t-p\tShow the patch introduced with each commit.\n"
"\t--stat\tShow statistics for files modified in each commit.\n"
"\t--shortstat\tDisplay only the changed/insertions/deletions line from the --"
"stat command.\n"
"\t--name-only\tShow the list of files modified after the commit "
"information.\n"
"\t--name-status\tShow the list of files affected with added/modified/deleted "
"information as well.\n"
"\t--abbrev-commit\tShow only the first few characters of the SHA-1 checksum "
"instead of all 40.\n"
"\t--relative-date\tDisplay the date in a relative format (for example, “2 "
"weeks ago”) instead of using the full date format.\n"
"\t--graph\tDisplay an ASCII graph of the branch and merge history beside the "
"log output.\n"
"\t--pretty\tShow commits in an alternate format. Options include oneline, "
"short, full, fuller, and format (where you specify your own format)."
msgstr ""
"\tOpcja\tOpis\n"
"\t-p\tPokaż pod każdą zmianą powiązaną łatkę\n"
"\t--stat\tPokaż pod każdą zmianą statystyki zmodyfikowanych plików\n"
"\t--shortstat\tPokaż wyłącznie zmienione/wstawione/usunięte linie z komendy "
"--stat\n"
"\t--name-only\tPokaż pod każdą zmianą listę zmodyfikowanych plików\n"
"\t--name-status\tPokaż listę plików o dodanych/zmodyfikowanych/usuniętych "
"informacjach.\n"
"\t--abbrev-commit\tPokaż tylko pierwsze kilka znaków (zamiast 40-tu) sumy "
"kontrolnej SHA-1.\n"
"\t--relative-date\tPokaż datę w formacie względnym (np. 2 tygodnie temu)\n"
"\t--graph\tPokaż graf ASCII gałęzi oraz historię scaleń obok wyniku.\n"
"\t--pretty\tPokaż zatwierdzone zmiany w poprawionym formacie. Dostępne opcje "
"obejmują oneline, short, full, fuller oraz format (gdzie określa własny "
"format)"

#: 01-chapter2.markdown:581
msgid "### Limiting Log Output ###"
msgstr "### Ograniczanie wyniku historii ###"

#: 01-chapter2.markdown:583
msgid ""
"In addition to output-formatting options, git log takes a number of useful "
"limiting options — that is, options that let you show only a subset of "
"commits. You’ve seen one such option already — the `-2` option, which show "
"only the last two commits. In fact, you can do `-<n>`, where `n` is any "
"integer to show the last `n` commits. In reality, you’re unlikely to use "
"that often, because Git by default pipes all output through a pager so you "
"see only one page of log output at a time."
msgstr ""
"Jako dodatek do opcji formatowania, git log przyjmuje także zestaw "
"parametrów ograniczających wynik do określonego podzbioru. Jeden z takich "
"parametrów pokazaliśmy już wcześniej: opcja `-2`, która spowodowała "
"pokazanie jedynie dwóch ostatnich rewizji. Oczywiście, możesz podać ich "
"dowolną liczbę - `-<n>`, gdzie `n` jest liczbą całkowitą. Na co dzień raczej "
"nie będziesz używał jej zbyt często, ponieważ Git domyślnie przekazuje wynik "
"do narzędzia stronicującego, w skutek czego i tak jednocześnie widzisz tylko "
"jedną jego stronę."

#: 01-chapter2.markdown:585
msgid ""
"However, the time-limiting options such as `--since` and `--until` are very "
"useful. For example, this command gets the list of commits made in the last "
"two weeks:"
msgstr ""
"Inaczej jest z w przypadku opcji ograniczania w czasie takich jak `--sience` "
"(od) oraz `--until` (do) które są wyjątkowo przydatne. Na przykład, poniższe "
"polecenie pobiera listę zmian dokonanych w ciągu ostatnich dwóch tygodni:"

#: 01-chapter2.markdown:587
msgid "\t$ git log --since=2.weeks"
msgstr "\t$ git log --since=2.weeks"

#: 01-chapter2.markdown:589
msgid ""
"This command works with lots of formats — you can specify a specific date "
"(“2008-01-15”) or a relative date such as “2 years 1 day 3 minutes ago”."
msgstr ""
"Polecenie to obsługuje mnóstwo formatów - możesz uściślić konkretną datę "
"(np. \"2008-01-15\") lub podać datę względną jak np. 2 lata 1 dzień 3 minuty "
"temu."

#: 01-chapter2.markdown:591
msgid ""
"You can also filter the list to commits that match some search criteria. The "
"`--author` option allows you to filter on a specific author, and the `--"
"grep` option lets you search for keywords in the commit messages. (Note that "
"if you want to specify both author and grep options, you have to add `--all-"
"match` or the command will match commits with either.)"
msgstr ""
"Możesz także odfiltrować listę pozostawiając jedynie rewizje spełniające "
"odpowiednie kryteria wyszukiwania. Opcja `--author` pozwala wybierać po "
"konkretnym autorze, a opcja `--grep` na wyszukiwanie po słowach kluczowych "
"zawartych w notkach zmian. (Zauważ, że jeżeli potrzebujesz określić zarówno "
"autora jak i słowa kluczowe, musisz dodać opcję `--all-match` - w przeciwnym "
"razie polecenie dopasuje jedynie wg jednego z kryteriów)"

#: 01-chapter2.markdown:593
msgid ""
"The last really useful option to pass to `git log` as a filter is a path. If "
"you specify a directory or file name, you can limit the log output to "
"commits that introduced a change to those files. This is always the last "
"option and is generally preceded by double dashes (`--`) to separate the "
"paths from the options."
msgstr ""
"Ostatnią, szczególnie przydatną opcją, akceptowaną przez `git log` jako "
"filtr, jest ścieżka. Możesz dzięki niej ograniczyć wynik wyłącznie do "
"rewizji, które modyfikują podane pliki. Jest to zawsze ostatnia w kolejności "
"opcja i musi być poprzedzona podwójnym myślnikiem `--`, tak żeby oddzielić "
"ścieżki od pozostałych opcji."

#: 01-chapter2.markdown:595
msgid ""
"In Table 2-3 we’ll list these and a few other common options for your "
"reference."
msgstr ""
"W tabeli 2-3 znajduje się ta jak i kilka innych często używanych opcji."

#: 01-chapter2.markdown:597
msgid ""
"\tOption\tDescription\n"
"\t-(n)\tShow only the last n commits\n"
"\t--since, --after\tLimit the commits to those made after the specified "
"date.\n"
"\t--until, --before\tLimit the commits to those made before the specified "
"date.\n"
"\t--author\tOnly show commits in which the author entry matches the "
"specified string.\n"
"\t--committer\tOnly show commits in which the committer entry matches the "
"specified string."
msgstr ""
"\tOpcja\tOpis\n"
"\t-(n)\tPokaż tylko ostatnie n rewizji.\n"
"\t--sience, --after\tOgranicza rewizje do tych wykonanych po określonej "
"dacie.\n"
"\t--until, --before\tOgranicza rewizje do tych wykonanych przed określoną "
"datą.\n"
"\t--author\tPokazuje rewizje, których wpis autora pasuje do podanego.\n"
"\t--committer\tPokazuje jedynie te rewizje w których osoba zatwierdzająca "
"zmiany pasuje do podanej."

#: 01-chapter2.markdown:604
msgid ""
"For example, if you want to see which commits modifying test files in the "
"Git source code history were committed by Junio Hamano and were not merges "
"in the month of October 2008, you can run something like this:"
msgstr ""
"Na przykład, żeby zobaczyć wyłącznie rewizje modyfikujące pliki testowe w "
"historii plików źródłowych Git-a zatwierdzonych przez Junio Hamano, ale nie "
"zespolonych w październiku 2008, możesz użyć następującego polecenia:"

#: 01-chapter2.markdown:606
msgid ""
"\t$ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\n"
"\t   --before=\"2008-11-01\" --no-merges -- t/\\n\t5610e3b - Fix testcase "
"failure when extended attribute\n"
"\tacd3b9e - Enhance hold_lock_file_for_{update,append}()\n"
"\tf563754 - demonstrate breakage of detached checkout wi\n"
"\td1a43f2 - reset --hard/read-tree --reset -u: remove un\n"
"\t51a94af - Fix \"checkout --track -b newbranch\" on detac\n"
"\tb0ad11e - pull: allow \"git pull origin $something:$cur"
msgstr ""
"\t$ git log --pretty=\"%h - %s\" --author=gitster --since=\"2008-10-01\" \\n"
"\t   --before=\"2008-11-01\" --no-merges -- t/\n"
"\t5610e3b - Fix testcase failure when extended attribute\n"
"\tacd3b9e - Enhance hold_lock_file_for_{update,append}()\n"
"\tf563754 - demonstrate breakage of detached checkout wi\n"
"\td1a43f2 - reset --hard/read-tree --reset -u: remove un\n"
"\t51a94af - Fix \"checkout --track -b newbranch\" on detac\n"
"\tb0ad11e - pull: allow \"git pull origin $something:$cur"

#: 01-chapter2.markdown:615
msgid ""
"Of the nearly 20,000 commits in the Git source code history, this command "
"shows the 6 that match those criteria."
msgstr ""
"Z prawie 20000 rewizji w historii kodu Gita, podana komenda wyłowiła jedynie "
"6 spełniających zadane kryteria."

#: 01-chapter2.markdown:617
msgid "### Using a GUI to Visualize History ###"
msgstr "### Wizualizacja historii w interfejsie graficznym ###"

#: 01-chapter2.markdown:619
msgid ""
"If you like to use a more graphical tool to visualize your commit history, "
"you may want to take a look at a Tcl/Tk program called gitk that is "
"distributed with Git. Gitk is basically a visual `git log` tool, and it "
"accepts nearly all the filtering options that `git log` does. If you type "
"gitk on the command line in your project, you should see something like "
"Figure 2-2."
msgstr ""
"Do wyświetlania historii rewizji możesz także użyć narzędzi okienkowych - "
"być może spodoba ci się na przykład napisany w Tcl/Tk program o nazwie gitk, "
"który jest dystrybuowany wraz z Gitem. Gitk to proste narzędzie do "
"wizualizacji wyniku polecenia `git log` i akceptuje ono prawie wszystkie, "
"wcześniej wymienione, opcje filtrowania. Po uruchomieniu gitk z linii "
"poleceń powinieneś zobaczyć okno podobne do widocznego na ekranie 2-2."

#: 01-chapter2.markdown:621
msgid ""
"Insert 18333fig0202.png \n"
"Figure 2-2. The gitk history visualizer."
msgstr ""
"Insert 18333fig0202.png \n"
"Ekran 2-2. Graficzny interfejs programu gitk przedstawiający historię "
"rewizji."

#: 01-chapter2.markdown:624
msgid ""
"You can see the commit history in the top half of the window along with a "
"nice ancestry graph. The diff viewer in the bottom half of the window shows "
"you the changes introduced at any commit you click."
msgstr ""
"Historia wraz z grafem przodków znajduje się w górnej połówce okna. W dolnej "
"części znajdziesz przeglądarkę różnic pokazującą zmiany wnoszone przez "
"wybraną rewizję."

#: 01-chapter2.markdown:626
msgid "## Undoing Things ##"
msgstr "## Cofanie zmian ##"

#: 01-chapter2.markdown:628
msgid ""
"At any stage, you may want to undo something. Here, we’ll review a few basic "
"tools for undoing changes that you’ve made. Be careful, because you can’t "
"always undo some of these undos. This is one of the few areas in Git where "
"you may lose some work if you do it wrong."
msgstr ""
"Każdą z wcześniej wprowadzonych zmian możesz cofnąć w dowolnym momencie. "
"Poniżej przyjrzymy się kilku podstawowym funkcjom cofającym modyfikacje. "
"Musisz być jednak ostrożny ponieważ nie zawsze można cofnąć niektóre z tych "
"cofnięć [FIXME]. Jest to jedno z niewielu miejsc w Gitcie, w których należy "
"być naprawdę ostrożnym, gdyż można stracić bezpowrotnie część pracy."

#: 01-chapter2.markdown:630
msgid "### Changing Your Last Commit ###"
msgstr "### Poprawka do ostatniej rewizji ###"

#: 01-chapter2.markdown:632
msgid ""
"One of the common undos takes place when you commit too early and possibly "
"forget to add some files, or you mess up your commit message. If you want to "
"try that commit again, you can run commit with the `--amend` option:"
msgstr ""
"Jeden z częstych przypadków to zbyt pochopne wykonanie rewizji i pominięcie "
"w niej części plików, lub też pomyłka w notce do zmian. Jeśli chcesz "
"poprawić wcześniejszą, błędną rewizję, wystarczy uruchomić git commit raz "
"jeszcze, tym razem, z opcją `--amend` (popraw):"

#: 01-chapter2.markdown:634
msgid "\t$ git commit --amend"
msgstr "\t$ git commit --amend"

#: 01-chapter2.markdown:636
msgid ""
"This command takes your staging area and uses it for the commit. If you’ve "
"have made no changes since your last commit (for instance, you run this "
"command immediately after your previous commit), then your snapshot will "
"look exactly the same and all you’ll change is your commit message."
msgstr ""
"Komenda bierze zawartość poczekalni i zatwierdza jako dodatkowe zmiany. "
"Jeśli niczego nie zmieniłeś od ostatniej rewizji (np. uruchomiłeś komendę "
"zaraz po poprzednim zatwierdzeniu zmian) wówczas twoja migawka się nie "
"zmieni ale będziesz miał możliwość modyfikacji notki."

#: 01-chapter2.markdown:638
msgid ""
"The same commit-message editor fires up, but it already contains the message "
"of your previous commit. You can edit the message the same as always, but it "
"overwrites your previous commit."
msgstr ""
"Jak zwykle zostanie uruchomiony edytor z załadowaną treścią poprzedniego "
"komentarza. Edycja przebiega dokładnie tak samo jak zawsze, z tą różnicą, że "
"na końcu zostanie nadpisana oryginalna treść notki."

#: 01-chapter2.markdown:640
msgid ""
"As an example, if you commit and then realize you forgot to stage the "
"changes in a file you wanted to add to this commit, you can do something "
"like this:"
msgstr ""
"Czas na przykład. Zatwierdziłeś zmiany a następnie zdałeś sobie sprawę, że "
"zapomniałeś dodać do poczekalni pliku, który chciałeś oryginalnie umieścić w "
"wykonanej rewizji. Wystarczy, że wykonasz następujące polecenie:"

#: 01-chapter2.markdown:642
msgid ""
"\t$ git commit -m 'initial commit'\n"
"\t$ git add forgotten_file\n"
"\t$ git commit --amend "
msgstr ""
"\t$ git commit -m 'initial commit'\n"
"\t$ git add forgotten_file\n"
"\t$ git commit --amend "

#: 01-chapter2.markdown:646
msgid ""
"All three of these commands end up with a single commit — the second commit "
"replaces the results of the first."
msgstr ""
"Wszystkie trzy komendy zakończą się jedną rewizją - druga operacja commit, "
"zastąpi wynik pierwszej."

#: 01-chapter2.markdown:648
msgid "### Unstaging a Staged File ###"
msgstr "### Usuwanie pliku z poczekalni ###"

#: 01-chapter2.markdown:650
msgid ""
"The next two sections demonstrate how to wrangle your staging area and "
"working directory changes. The nice part is that the command you use to "
"determine the state of those two areas also reminds you how to undo changes "
"to them. For example, let’s say you’ve changed two files and want to commit "
"them as two separate changes, but you accidentally type `git add *` and "
"stage them both. How can you unstage one of the two? The `git status` "
"command reminds you:"
msgstr ""
"Następne dwie sekcje pokazują jak zarządzać poczekalnią i zmianami w "
"katalogu roboczym. Dobra wiadomość jest taka, że komenda używana do "
"określenia stanu obu obszarów przypomina sama jak cofnąć wprowadzone w nich "
"zmiany. Na przykład, powiedzmy, że zmieniłeś dwa pliki i chcesz teraz "
"zatwierdzić je jako dwie osobne rewizje, ale odruchowo wpisałeś `git add *` "
"co spowodowało umieszczenie obu plików w poczekalni. Jak w takiej sytuacji "
"usunąć stamtąd jeden z nich? Polecenie `git status` przypomni ci, że:"

#: 01-chapter2.markdown:652
msgid ""
"\t$ git add .\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       modified:   README.txt\n"
"\t#       modified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git add .\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       modified:   README.txt\n"
"\t#       modified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:662
msgid ""
"Right below the “Changes to be committed” text, it says use `git reset HEAD "
"<file>...` to unstage. So, let’s use that advice to unstage the benchmarks."
"rb file:"
msgstr ""
"Tekst znajdujący się zaraz pod nagłówkiem zmian do zatwierdzenia mówi \"użyj "
"`git reset HEAD <plik>...` żeby usunąć plik z poczekalni. Nie pozostaje więc "
"nic innego jak zastosować się do porady i zastosować ją na pliku benchmarks."
"rb:"

#: 01-chapter2.markdown:664
msgid ""
"\t$ git reset HEAD benchmarks.rb \n"
"\tbenchmarks.rb: locally modified\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       modified:   README.txt\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\t#\n"
"\t#       modified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t$ git reset HEAD benchmarks.rb \n"
"\tbenchmarks.rb: locally modified\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       modified:   README.txt\n"
"\t#\n"
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\t#\n"
"\t#       modified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:680
msgid ""
"The command is a bit strange, but it works. The benchmarks.rb file is "
"modified but once again unstaged."
msgstr ""
"Polecenie wygląda odrobinę dziwacznie, ale działa. Plik benchmarks.rb ciągle "
"zawiera wprowadzone modyfikacje ale nie znajduje się już w poczekalni."

#: 01-chapter2.markdown:682
msgid "### Unmodifying a Modified File ###"
msgstr "### Cofanie zmian w zmodyfikowanym pliku ###"

#: 01-chapter2.markdown:684
msgid ""
"What if you realize that you don’t want to keep your changes to the "
"benchmarks.rb file? How can you easily unmodify it — revert it back to what "
"it looked like when you last committed (or initially cloned, or however you "
"got it into your working directory)? Luckily, `git status` tells you how to "
"do that, too. In the last example output, the unstaged area looks like this:"
msgstr ""
"Co jeśli okaże się, że nie chcesz jednak zatrzymać zmian wykonanych w pliku "
"benchmarks.rb? W jaki sposób łatwo cofnąć wprowadzone modyfikacje czyli "
"przywrócić plik do stanu w jakim był po ostatniej rewizji (lub początkowym "
"sklonowaniu, lub jakkolwiek dostał się do katalogu roboczego)? Z pomocą "
"przybywa raz jeszcze polecenie `git status`. W ostatnim przykładzie, pliki "
"będące poza poczekalnią wyglądają następująco:"

#: 01-chapter2.markdown:686
msgid ""
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\t#\n"
"\t#       modified:   benchmarks.rb\n"
"\t#"
msgstr ""
"\t# Changed but not updated:\n"
"\t#   (use \"git add <file>...\" to update what will be committed)\n"
"\t#   (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
"\t#\n"
"\t#       modified:   benchmarks.rb\n"
"\t#"

#: 01-chapter2.markdown:693
msgid ""
"It tells you pretty explicitly how to discard the changes you’ve made (at "
"least, the newer versions of Git, 1.6.1 and later, do this — if you have an "
"older version, we highly recommend upgrading it to get some of these nicer "
"usability features). Let’s do what it says:"
msgstr ""
"Git konkretnie wskazuje jak pozbyć się dokonanych zmian (w każdym bądź razie "
"robią to wersje Gita 1.6.1 i nowsze - jeśli posiadasz starszą, bardzo "
"zalecamy aktualizację, która ułatwi ci korzystanie z programu). Zróbmy zatem "
"co każe Git:"

#: 01-chapter2.markdown:695
msgid ""
"\t$ git checkout -- benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       modified:   README.txt\n"
"\t#"
msgstr ""
"\t$ git checkout -- benchmarks.rb\n"
"\t$ git status\n"
"\t# On branch master\n"
"\t# Changes to be committed:\n"
"\t#   (use \"git reset HEAD <file>...\" to unstage)\n"
"\t#\n"
"\t#       modified:   README.txt\n"
"\t#"

#: 01-chapter2.markdown:704
msgid ""
"You can see that the changes have been reverted. You should also realize "
"that this is a dangerous command: any changes you made to that file are gone "
"— you just copied another file over it. Don’t ever use this command unless "
"you absolutely know that you don’t want the file. If you just need to get it "
"out of the way, we’ll go over stashing and branching in the next chapter; "
"these are generally better ways to go. "
msgstr ""
"Możesz teraz przeczytać, że zmiany zostały cofnięte. Powinieneś sobie już "
"także zdawać sprawę, że jest to dość niebezpieczne polecenie: wszelkie "
"zmiany jakie wykonałeś w pliku przepadają - w rzeczy samej został on "
"nadpisany poprzednią wersją. Nigdy nie używaj tego polecenia dopóki nie "
"jesteś absolutnie pewny, że nie chcesz i nie potrzebujesz już danego pliku. "
"Jeśli jedynie chcesz się go chwilowo pozbyć przyjrzymy się specjalnej "
"komendzie schowka (stash) oraz gałęziom w kolejnych rozdziałach - są to "
"generalnie znacznie lepsze sposoby."

#: 01-chapter2.markdown:706
msgid ""
"Remember, anything that is committed in Git can almost always be recovered. "
"Even commits that were on branches that were deleted or commits that were "
"overwritten with an `--amend` commit can be recovered (see Chapter 9 for "
"data recovery). However, anything you lose that was never committed is "
"likely never to be seen again."
msgstr ""
"Pamiętaj, że wszystko co zatwierdzasz do repozytorium Gita może zostać w "
"niemalże dowolnym momencie odtworzone. Nawet rewizje, które znajdowały się w "
"usuniętych gałęziach, albo rewizje nadpisane zatwierdzeniem poprawiającym `--"
"amend` mogą być odtworzone (odzyskiwanie danych opisujemy w rozdziale 9). "
"Jednakże, cokolwiek utraciłeś a nie było to nigdy wcześniej zatwierdzane do "
"repozytorium, prawdopodobnie odeszło na zawsze."

#: 01-chapter2.markdown:708
msgid "## Working with Remotes ##"
msgstr "## Praca ze zdalnym repozytorium ##"

#: 01-chapter2.markdown:710
msgid ""
"To be able to collaborate on any Git project, you need to know how to manage "
"your remote repositories. Remote repositories are versions of your project "
"that are hosted on the Internet or network somewhere. You can have several "
"of them, each of which generally is either read-only or read/write for you. "
"Collaborating with others involves managing these remote repositories and "
"pushing and pulling data to and from them when you need to share work.\n"
"Managing remote repositories includes knowing how to add remote "
"repositories, remove remotes that are no longer valid, manage various remote "
"branches and define them as being tracked or not, and more. In this section, "
"we’ll cover these remote-management skills."
msgstr ""
"Żeby móc współpracować za pośrednictwem Gita z innymi ludźmi, w jakimkolwiek "
"projekcie, musisz nauczyć się zarządzać zdalnymi repozytoriami. Zdalne "
"repozytorium to wersja twojego projektu utrzymywana na serwerze dostępnym "
"poprzez Internet lub inną sieć. Możesz mieć ich kilka, z których każde może "
"być tylko do odczytu lub zarówno odczytu jak i zapisu. Współpraca w grupie "
"zakłada zarządzanie zdalnymi repozytoriami oraz wypychanie zmian na zewnątrz "
"i pobieranie ich w celu współdzielenia pracy/kodu.\n"
"Zarządzanie zdalnymi repozytoriami obejmuje umiejętność dodawania zdalnych "
"repozytoriów, usuwania ich jeśli nie są dłużej poprawne, zarządzania "
"zdalnymi gałęziami oraz definiowania je jako śledzone lub nie, i inne. "
"Zajmiemy się tym wszystkim w niniejszym rozdziale."

#: 01-chapter2.markdown:713
msgid "### Showing Your Remotes ###"
msgstr "### Wyświetlanie zdalnych repozytoriów ###"

#: 01-chapter2.markdown:715
msgid ""
"To see which remote servers you have configured, you can run the git remote "
"command. It lists the shortnames of each remote handle you’ve specified. If "
"you’ve cloned your repository, you should at least see origin — that is the "
"default name Git gives to the server you cloned from:"
msgstr ""
"Aby zobaczyć obecnie skonfigurowane serwery możesz uruchomić polecenie `git "
"remote`. Pokazuje ono skrócone nazwy wszystkich określonych przez ciebie "
"serwerów. Jeśli sklonowałeś swoje repozytorium, powinieneś przynajmniej "
"zobaczyć origin (źródło) - nazwa domyślna którą Git nadaje serwerowi z "
"którego klonujesz projekt:"

#: 01-chapter2.markdown:717
msgid ""
"\t$ git clone git://github.com/schacon/ticgit.git\n"
"\tInitialized empty Git repository in /private/tmp/ticgit/.git/\n"
"\tremote: Counting objects: 595, done.\n"
"\tremote: Compressing objects: 100% (269/269), done.\n"
"\tremote: Total 595 (delta 255), reused 589 (delta 253)\n"
"\tReceiving objects: 100% (595/595), 73.31 KiB | 1 KiB/s, done.\n"
"\tResolving deltas: 100% (255/255), done.\n"
"\t$ cd ticgit\n"
"\t$ git remote \n"
"\torigin"
msgstr ""
"\t$ git clone git://github.com/schacon/ticgit.git\n"
"\tInitialized empty Git repository in /private/tmp/ticgit/.git/\n"
"\tremote: Counting objects: 595, done.\n"
"\tremote: Compressing objects: 100% (269/269), done.\n"
"\tremote: Total 595 (delta 255), reused 589 (delta 253)\n"
"\tReceiving objects: 100% (595/595), 73.31 KiB | 1 KiB/s, done.\n"
"\tResolving deltas: 100% (255/255), done.\n"
"\t$ cd ticgit\n"
"\t$ git remote \n"
"\torigin"

#: 01-chapter2.markdown:728
msgid ""
"You can also specify `-v`, which shows you the URL that Git has stored for "
"the shortname to be expanded to:"
msgstr ""
"Dodanie parametru `-v` spowoduje dodatkowo wyświetlenie przypisanego do "
"skrótu, pełnego, zapamiętanego przez Gita, adresu URL:"

#: 01-chapter2.markdown:730
msgid ""
"\t$ git remote -v\n"
"\torigin\tgit://github.com/schacon/ticgit.git"
msgstr ""
"\t$ git remote -v\n"
"\torigin\tgit://github.com/schacon/ticgit.git"

#: 01-chapter2.markdown:733
msgid ""
"If you have more than one remote, the command lists them all. For example, "
"my Grit repository looks something like this."
msgstr ""
"Jeśli posiadasz więcej niż jedno zdalne repozytorium polecenie wyświetli je "
"wszystkie. Na przykład, moje repozytorium z Gritem wygląda następująco:"

#: 01-chapter2.markdown:735
msgid ""
"\t$ cd grit\n"
"\t$ git remote -v\n"
"\tbakkdoor  git://github.com/bakkdoor/grit.git\n"
"\tcho45     git://github.com/cho45/grit.git\n"
"\tdefunkt   git://github.com/defunkt/grit.git\n"
"\tkoke      git://github.com/koke/grit.git\n"
"\torigin    git@github.com:mojombo/grit.git"
msgstr ""
"\t$ cd grit\n"
"\t$ git remote -v\n"
"\tbakkdoor  git://github.com/bakkdoor/grit.git\n"
"\tcho45     git://github.com/cho45/grit.git\n"
"\tdefunkt   git://github.com/defunkt/grit.git\n"
"\tkoke      git://github.com/koke/grit.git\n"
"\torigin    git@github.com:mojombo/grit.git"

#: 01-chapter2.markdown:743
msgid ""
"This means we can pull contributions from any of these users pretty easily. "
"But notice that only the origin remote is an SSH URL, so it’s the only one I "
"can push to (we’ll cover why this is in Chapter 4)."
msgstr ""
"Oznacza to, że możesz szybko i łatwo pobrać zmiany z każdego z nich. Zauważ "
"jednak, że tylko oryginalne źródło (origin) jest adresem URL SSH, więc jest "
"jedynym do którego mogę wysyłać własne zmiany (w szczegółach zajmiemy się "
"tym tematem w rozdziale 4)."

#: 01-chapter2.markdown:745
msgid "### Adding Remote Repositories ###"
msgstr "### Dodawanie zdalnych repozytoriów ###"

#: 01-chapter2.markdown:747
msgid ""
"I’ve mentioned and given some demonstrations of adding remote repositories "
"in previous sections, but here is how to do it explicitly. To add a new "
"remote Git repository as a shortname you can reference easily, run `git "
"remote add [shortname] [url]`:"
msgstr ""
"W poprzednich sekcjach jedynie wspomniałem o dodawaniu zdalnych "
"repozytoriów, teraz pokażę jak to zrobić to samemu. Aby dodać zdalne "
"repozytorium jako skrót, do którego z łatwością będziesz się mógł odnosić w "
"przyszłości, uruchom polecenie `git remote add [skrót] [url]`:"

#: 01-chapter2.markdown:749
msgid ""
"\t$ git remote\n"
"\torigin\n"
"\t$ git remote add pb git://github.com/paulboone/ticgit.git\n"
"\t$ git remote -v\n"
"\torigin\tgit://github.com/schacon/ticgit.git\n"
"\tpb\tgit://github.com/paulboone/ticgit.git"
msgstr ""
"\t$ git remote\n"
"\torigin\n"
"\t$ git remote add pb git://github.com/paulboone/ticgit.git\n"
"\t$ git remote -v\n"
"\torigin\tgit://github.com/schacon/ticgit.git\n"
"\tpb\tgit://github.com/paulboone/ticgit.git"

#: 01-chapter2.markdown:756
msgid ""
"Now you can use the string pb on the command line in lieu of the whole URL. "
"For example, if you want to fetch all the information that Paul has but that "
"you don’t yet have in your repository, you can run git fetch pb:"
msgstr ""
"Teraz możesz używać nazwy pb zamiast całego adresu URL. Na przykład, jeżeli "
"chcesz pobrać wszystkie informacje, które posiada Paul, a których ty jeszcze "
"nie masz, możesz uruchomić polecenie fetch wraz z parametrem pb:"

#: 01-chapter2.markdown:758
msgid ""
"\t$ git fetch pb\n"
"\tremote: Counting objects: 58, done.\n"
"\tremote: Compressing objects: 100% (41/41), done.\n"
"\tremote: Total 44 (delta 24), reused 1 (delta 0)\n"
"\tUnpacking objects: 100% (44/44), done.\n"
"\tFrom git://github.com/paulboone/ticgit\n"
"\t * [new branch]      master     -> pb/master\n"
"\t * [new branch]      ticgit     -> pb/ticgit"
msgstr ""
"\t$ git fetch pb\n"
"\tremote: Counting objects: 58, done.\n"
"\tremote: Compressing objects: 100% (41/41), done.\n"
"\tremote: Total 44 (delta 24), reused 1 (delta 0)\n"
"\tUnpacking objects: 100% (44/44), done.\n"
"\tFrom git://github.com/paulboone/ticgit\n"
"\t * [new branch]      master     -> pb/master\n"
"\t * [new branch]      ticgit     -> pb/ticgit"

#: 01-chapter2.markdown:767
msgid ""
"Paul’s master branch is accessible locally as `pb/master` — you can merge it "
"into one of your branches, or you can check out a local branch at that point "
"if you want to inspect it."
msgstr ""
"Główna gałąź (master) Paula jest dostępna lokalnie jako `pb\\master` - "
"możesz scalić ją do którejś z własnych gałęzi lub, jeśli chcesz, jedynie ją "
"przejrzeć przełączając się do lokalnej gałęzi."

#: 01-chapter2.markdown:769
msgid "### Fetching and Pulling from Your Remotes ###"
msgstr ""
"### Pobieranie i wciąganie zmian ze zdalnych repozytoriów (polecenia fetch i "
"pull) ###"

#: 01-chapter2.markdown:771
msgid "As you just saw, to get data from your remote projects, you can run:"
msgstr ""
"Jak przed chwilą zobaczyłeś aby uzyskać dane ze zdalnego projektu wystarczy "
"uruchomić:"

#: 01-chapter2.markdown:773
msgid "\t$ git fetch [remote-name]"
msgstr "\t$ git fetch [nazwa-zdalengo-repozytorium]"

#: 01-chapter2.markdown:775
msgid ""
"The command goes out to that remote project and pulls down all the data from "
"that remote project that you don’t have yet. After you do this, you should "
"have references to all the branches from that remote, which you can merge in "
"or inspect at any time. (We’ll go over what branches are and how to use them "
"in much more detail in Chapter 3.)"
msgstr ""
"Polecenie to sięga do zdalnego projektu i pobiera z niego wszystkie dane, "
"których jeszcze nie masz. Po tej operacji, powinieneś mieć już odnośniki do "
"wszystkich zdalnych gałęzi, które możesz teraz scalić z własnymi plikami lub "
"sprawdzić ich zawartość. (Gałęziami oraz ich obsługą zajmiemy się w "
"szczegółach w rozdziale 3)."

#: 01-chapter2.markdown:777
msgid ""
"If you clone a repository, the command automatically adds that remote "
"repository under the name origin. So, `git fetch origin` fetches any new "
"work that has been pushed to that server since you cloned (or last fetched "
"from) it. It’s important to note that the fetch command pulls the data to "
"your local repository — it doesn’t automatically merge it with any of your "
"work or modify what you’re currently working on. You have to merge it "
"manually into your work when you’re ready."
msgstr ""
"Po sklonowaniu repozytorium automatycznie zostanie dodany skrót o nazwie "
"origin wskazujący na oryginalną lokalizację. Tak więc, `git fetch origin` "
"pobierze każdą nową pracę jaka została wypchnięta na oryginalny serwer od "
"momentu sklonowania go przez ciebie (lub ostatniego pobrania zmian). Warto "
"zauważyć, że polecenie fetch pobiera dane do lokalnego repozytorium - nie "
"scala jednak automatycznie zmian z żadnym z twoich plików roboczych jak i w "
"żaden inny sposób tych plików nie modyfikuje. Musisz scalić wszystkie zmiany "
"ręcznie, kiedy będziesz już do tego gotowy."

#: 01-chapter2.markdown:779
msgid ""
"If you have a branch set up to track a remote branch (see the next section "
"and Chapter 3 for more information), you can use the `git pull` command to "
"automatically fetch and then merge a remote branch into your current branch. "
"This may be an easier or more comfortable workflow for you; and by default, "
"the `git clone` command automatically sets up your local master branch to "
"track the remote master branch on the server you cloned from (assuming the "
"remote has a master branch). Running `git pull` generally fetches data from "
"the server you originally cloned from and automatically tries to merge it "
"into the code you’re currently working on."
msgstr ""
"Jeśli twoja gałąź lokalna jest ustawiona tak, żeby śledzić zdalną gałąź "
"(więcej informacji na ten temat znajdziesz w następnej sekcji, rozdziale 3), "
"wystarczy użyć polecenia `git pull`, żeby automatycznie pobrać dane (fetch) "
"i je scalić (merge) z lokalnymi plikami. Może być to dla ciebie "
"wygodniejsze; domyślnie, polecenie `git clone` ustawia twoją lokalną gałąź "
"główną master tak aby śledziła zmiany w zdalnej gałęzi master na serwerze z "
"którego sklonowałeś repozytorium (zakładając, że zdalne repozytorium posiada "
"gałąź master). Uruchomienie `git pull`, ogólnie mówiąc, pobiera dane z "
"serwera na bazie którego oryginalnie stworzyłeś swoje repozytorium i próbuje "
"automatycznie scalić zmiany z kodem roboczym nad którym aktualnie, lokalnie "
"pracujesz."

#: 01-chapter2.markdown:781
msgid "### Pushing to Your Remotes ###"
msgstr "### Wypychanie zmian na zewnątrz ###"

#: 01-chapter2.markdown:783
msgid ""
"When you have your project at a point that you want to share, you have to "
"push it upstream. The command for this is simple: `git push [remote-name] "
"[branch-name]`. If you want to push your master branch to your `origin` "
"server (again, cloning generally sets up both of those names for you "
"automatically), then you can run this to push your work back up to the "
"server:"
msgstr ""
"Jeśli doszedłeś z projektem do tego przyjemnego momentu, kiedy możesz i "
"chcesz już podzielić się swoją pracą z innymi, wystarczy, że wypchniesz "
"swoje zmiany na zewnątrz. Służące do tego polecenie jest proste `git push "
"[nazwa-zdalnego-repo] [nazwa-gałęzi]`. Jeśli chcesz wypchnąć gałąź główną "
"master na oryginalny serwer źródłowy `origin` (ponownie, klonowanie ustawia "
"obie te nazwy - master i origin - domyślnie i automatycznie), możesz "
"uruchomić następujące polecenie:"

#: 01-chapter2.markdown:785
msgid "\t$ git push origin master"
msgstr "\t$ git push origin master"

#: 01-chapter2.markdown:787
msgid ""
"This command works only if you cloned from a server to which you have write "
"access and if nobody has pushed in the meantime. If you and someone else "
"clone at the same time and they push upstream and then you push upstream, "
"your push will rightly be rejected. You’ll have to pull down their work "
"first and incorporate it into yours before you’ll be allowed to push. See "
"Chapter 3 for more detailed information on how to push to remote servers."
msgstr ""
"Polecenie zadziała tylko jeśli sklonowałeś repozytorium z serwera do którego "
"masz prawo zapisu oraz jeśli nikt inny w międzyczasie nie wypchnął własnych "
"zmian. Jeśli zarówno ty jak i inna osoba sklonowały dane w tym samym czasie, "
"po czym ta druga osoba wypchnęła własne zmiany, a następnie ty próbujesz "
"zrobić to samo z własnymi modyfikacjami, twoja próba zostanie od razu "
"odrzucona. Będziesz musiał najpierw zespolić (pobrać i scalić) najnowsze "
"zmiany ze zdalnego repozytorium zanim będziesz mógł wypchnąć własne. Więcej "
"szczegółów na temat wypychania zmian dowiesz się z rozdziału 3. "

#: 01-chapter2.markdown:789
msgid "### Inspecting a Remote ###"
msgstr "### Inspekcja zdalnych zmian ###"

#: 01-chapter2.markdown:791
msgid ""
"If you want to see more information about a particular remote, you can use "
"the `git remote show [remote-name]` command. If you run this command with a "
"particular shortname, such as `origin`, you get something like this:"
msgstr ""
"Jeśli chcesz zobaczyć więcej informacji o konkretnym zdalnym repozytorium, "
"użyj polecenia `git remote show [nazwa-zdalnego-repo]`. Uruchamiając je z "
"konkretnym skrótem, jak np. `origin`, zobaczysz mniej więcej coś takiego:"

#: 01-chapter2.markdown:793
msgid ""
"\t$ git remote show origin\n"
"\t* remote origin\n"
"\t  URL: git://github.com/schacon/ticgit.git\n"
"\t  Remote branch merged with 'git pull' while on branch master\n"
"\t    master\n"
"\t  Tracked remote branches\n"
"\t    master\n"
"\t    ticgit"
msgstr ""
"\t$ git remote show origin\n"
"\t* remote origin\n"
"\t  URL: git://github.com/schacon/ticgit.git\n"
"\t  Remote branch merged with 'git pull' while on branch master\n"
"\t    master\n"
"\t  Tracked remote branches\n"
"\t    master\n"
"\t    ticgit"

#: 01-chapter2.markdown:802
msgid ""
"It lists the URL for the remote repository as well as the tracking branch "
"information. The command helpfully tells you that if you’re on the master "
"branch and you run `git pull`, it will automatically merge in the master "
"branch on the remote after it fetches all the remote references. It also "
"lists all the remote references it has pulled down."
msgstr ""
"Informacja zawiera adres URL zdalnego repozytorium oraz informacje o "
"śledzonej gałęzi. Polecenie mówi także, że jeśli znajdujesz się w gałęzi "
"master i uruchomisz polecenie `git pull`, zmiany ze zdalnego repozytorium "
"zaraz po pobraniu automatycznie zostaną scalone z gałęzią master w twoim, "
"lokalnym repozytorium. Polecenie listuje także wszystkie pobrane zdalne "
"odnośniki."

#: 01-chapter2.markdown:804
msgid ""
"That is a simple example you’re likely to encounter. When you’re using Git "
"more heavily, however, you may see much more information from `git remote "
"show`:"
msgstr ""
"Poniżej znajdziesz prosty przykład na który, pewnie w nieco innej wersji, "
"ale sam się wkrótce natkniesz. Używając intensywnie Gita, możesz zobaczyć "
"znacznie więcej informacji w wyniku działania polecenia `git remote show`:"

#: 01-chapter2.markdown:806
msgid ""
"\t$ git remote show origin\n"
"\t* remote origin\n"
"\t  URL: git@github.com:defunkt/github.git\n"
"\t  Remote branch merged with 'git pull' while on branch issues\n"
"\t    issues\n"
"\t  Remote branch merged with 'git pull' while on branch master\n"
"\t    master\n"
"\t  New remote branches (next fetch will store in remotes/origin)\n"
"\t    caching\n"
"\t  Stale tracking branches (use 'git remote prune')\n"
"\t    libwalker\n"
"\t    walker2\n"
"\t  Tracked remote branches\n"
"\t    acl\n"
"\t    apiv2\n"
"\t    dashboard2\n"
"\t    issues\n"
"\t    master\n"
"\t    postgres\n"
"\t  Local branch pushed with 'git push'\n"
"\t    master:master"
msgstr ""
"\t$ git remote show origin\n"
"\t* remote origin\n"
"\t  URL: git@github.com:defunkt/github.git\n"
"\t  Remote branch merged with 'git pull' while on branch issues\n"
"\t    issues\n"
"\t  Remote branch merged with 'git pull' while on branch master\n"
"\t    master\n"
"\t  New remote branches (next fetch will store in remotes/origin)\n"
"\t    caching\n"
"\t  Stale tracking branches (use 'git remote prune')\n"
"\t    libwalker\n"
"\t    walker2\n"
"\t  Tracked remote branches\n"
"\t    acl\n"
"\t    apiv2\n"
"\t    dashboard2\n"
"\t    issues\n"
"\t    master\n"
"\t    postgres\n"
"\t  Local branch pushed with 'git push'\n"
"\t    master:master"

#: 01-chapter2.markdown:828
msgid ""
"This command shows which branch is automatically pushed when you run `git "
"push` on certain branches. It also shows you which remote branches on the "
"server you don’t yet have, which remote branches you have that have been "
"removed from the server, and multiple branches that are automatically merged "
"when you run `git pull`."
msgstr ""
"Przywołane polecenie pokazuje która gałąź zostanie automatycznie wypchnięta "
"po uruchomieniu `git push` na poszczególnych gałęziach. Zobaczysz także, "
"których zdalnych gałęzi z serwera jeszcze nie posiadasz, które z nich już "
"masz ale z kolei nie ma ich już na serwerze oraz gałęzie, które zostaną "
"automatycznie scalone po uruchomieniu `git pull`."

#: 01-chapter2.markdown:830
msgid "### Removing and Renaming Remotes ###"
msgstr "### Usuwanie i zmiana nazwy zdalnych repozytoriów ###"

#: 01-chapter2.markdown:832
msgid ""
"If you want to rename a reference, in newer versions of Git you can run `git "
"remote rename` to change a remote’s shortname. For instance, if you want to "
"rename `pb` to `paul`, you can do so with `git remote rename`:"
msgstr ""
"Aby zmienić nazwę odnośnika, czyli skrótu przypisanego do repozytorium, w "
"nowszych wersjach Gita możesz uruchomić `git remote rename`. Na przykład, "
"aby zmienić nazwę `pb` na `paul`, wystarczy, że uruchomisz polecenie `git "
"remote rename` w poniższy sposób:"

#: 01-chapter2.markdown:834
msgid ""
"\t$ git remote rename pb paul\n"
"\t$ git remote\n"
"\torigin\n"
"\tpaul"
msgstr ""
"\t$ git remote rename pb paul\n"
"\t$ git remote\n"
"\torigin\n"
"\tpaul"

#: 01-chapter2.markdown:839
msgid ""
"It’s worth mentioning that this changes your remote branch names, too. What "
"used to be referenced at `pb/master` is now at `paul/master`."
msgstr ""
"Warto wspomnieć, że komenda zmienia także nazwy zdalnych gałęzi. To co do "
"tej pory było określane jako `pb/master` od teraz powinno być adresowane "
"jako `paul/master`."

#: 01-chapter2.markdown:841
msgid ""
"If you want to remove a reference for some reason — you’ve moved the server "
"or are no longer using a particular mirror, or perhaps a contributor isn’t "
"contributing anymore — you can use `git remote rm`:"
msgstr ""
"Jeśli z jakiegoś powodu chcesz usunąć odnośnik - przeniosłeś serwer czy "
"dłużej nie korzystasz z konkretnego mirror-a, albo współpracownik nie "
"udziela się już dłużej w projekcie - możesz skorzystać z `git remote rm`:"

#: 01-chapter2.markdown:843
msgid ""
"\t$ git remote rm paul\n"
"\t$ git remote\n"
"\torigin"
msgstr ""
"\t$ git remote rm paul\n"
"\t$ git remote\n"
"\torigin"

#: 01-chapter2.markdown:847
msgid "## Tagging ##"
msgstr "## Tagowanie (etykietowanie) ##"

#: 01-chapter2.markdown:849
msgid ""
"Like most VCSs, Git has the ability to tag specific points in history as "
"being important. Generally, people use this functionality to mark release "
"points (v1.0, and so on). In this section, you’ll learn how to list the "
"available tags, how to create new tags, and what the different types of tags "
"are."
msgstr ""
"Podobnie jak większość systemów kontroli wersji, Git posiada możliwość "
"etykietowania konkretnych, ważnych miejsc w historii. Ogólnie, większość "
"użytkowników korzysta z tej możliwości do zaznaczania ważnych wersji kodu "
"(np. wersja 1.0, itd.). Z tego rozdziału dowiesz się jak wyświetlać dostępne "
"etykiety, jak tworzyć nowe oraz jakie rodzaje tagów rozróżniamy."

#: 01-chapter2.markdown:851
msgid "### Listing Your Tags ###"
msgstr "### Listowanie etykiet ###"

#: 01-chapter2.markdown:853
msgid ""
"Listing the available tags in Git is straightforward. Just type `git tag`:"
msgstr ""
"Wyświetlanie wszystkich dostępnych tagów w Gitcie jest bardzo proste. "
"Wystarczy uruchomić `git tag`:"

#: 01-chapter2.markdown:855
msgid ""
"\t$ git tag\n"
"\tv0.1\n"
"\tv1.3"
msgstr ""
"\t$ git tag\n"
"\tv0.1\n"
"\tv1.3"

#: 01-chapter2.markdown:859
msgid ""
"This command lists the tags in alphabetical order; the order in which they "
"appear has no real importance."
msgstr ""
"Polecenie wyświetla etykiety w porządku alfabetycznym; porządek w jakim się "
"pojawią nie ma jednak faktycznego znaczenia."

#: 01-chapter2.markdown:861
msgid ""
"You can also search for tags with a particular pattern. The Git source repo, "
"for instance, contains more than 240 tags. If you’re only interested in "
"looking at the 1.4.2 series, you can run this:"
msgstr ""
"Możesz także wyszukiwać etykiety za pomocą wzorca. Na przykład, repozytorium "
"kodu źródłowego Gita zawiera ponad 240 tagów. Jeśli interesuje cię np. "
"wyłącznie seria 1.4.2, możesz ją wyszukać w następujący sposób:"

#: 01-chapter2.markdown:863
msgid ""
"\t$ git tag -l 'v1.4.2.*'\n"
"\tv1.4.2.1\n"
"\tv1.4.2.2\n"
"\tv1.4.2.3\n"
"\tv1.4.2.4"
msgstr ""
"\t$ git tag -l 'v1.4.2.*'\n"
"\tv1.4.2.1\n"
"\tv1.4.2.2\n"
"\tv1.4.2.3\n"
"\tv1.4.2.4"

#: 01-chapter2.markdown:869
msgid "### Creating Tags ###"
msgstr "### Tworzenie etykiet ###"

#: 01-chapter2.markdown:871
msgid ""
"Git uses two main types of tags: lightweight and annotated. A lightweight "
"tag is very much like a branch that doesn’t change — it’s just a pointer to "
"a specific commit. Annotated tags, however, are stored as full objects in "
"the Git database. They’re checksummed; contain the tagger name, e-mail, and "
"date; have a tagging message; and can be signed and verified with GNU "
"Privacy Guard (GPG). It’s generally recommended that you create annotated "
"tags so you can have all this information; but if you want a temporary tag "
"or for some reason don’t want to keep the other information, lightweight "
"tags are available too."
msgstr ""
"Git używa 2 głównych rodzajów etykiet: lekkich i opisanych. Pierwsze z nich "
"- lekkie - zachowują się mniej więcej tak jak gałąź, która się nie zmienia - "
"jest to tylko wskaźnik do konkretnej rewizji. Z kolei, etykiety opisane są "
"przechowywane jako pełne obiekty w bazie danych Gita. Są one opatrywane sumą "
"kontrolną, zawierają nazwisko osoby etykietującej, jej adres e-mail oraz "
"datę; ponadto, posiadają notkę etykiety, oraz mogą być podpisywane i "
"weryfikowane za pomocą GNU Privacy Guard (GPG). Ogólnie zaleca się aby przy "
"tworzeniu etykiet opisanych uwzględniać wszystkie te infromacje; a jeżeli "
"potrzebujesz jedynie etykiety tymczasowej albo z innych powodów nie "
"potrzebujesz tych wszystkich danych, możesz po prostu użyć etykiety lekkiej."

#: 01-chapter2.markdown:873
msgid "### Annotated Tags ###"
msgstr "### Etykiety opisane ###"

#: 01-chapter2.markdown:875
msgid ""
"Creating an annotated tag in Git is simple. The easiest way is to specify `-"
"a` when you run the `tag` command:"
msgstr ""
"Tworzenie etykiety opisanej, jak większość rzeczy w Gitcie, jest proste. "
"Wystarczy podać parametr `-a` podczas uruchamiania komendy `tag`:"

#: 01-chapter2.markdown:877
msgid ""
"\t$ git tag -a v1.4 -m 'my version 1.4'\n"
"\t$ git tag\n"
"\tv0.1\n"
"\tv1.3\n"
"\tv1.4"
msgstr ""
"\t$ git tag -a v1.4 -m 'my version 1.4'\n"
"\t$ git tag\n"
"\tv0.1\n"
"\tv1.3\n"
"\tv1.4"

#: 01-chapter2.markdown:883
msgid ""
"The `-m` specifies a tagging message, which is stored with the tag. If you "
"don’t specify a message for an annotated tag, Git launches your editor so "
"you can type it in."
msgstr ""
"Parametr `-m` określa notkę etykiety, która jest wraz z nią przechowywania. "
"Jeśli nie podasz treści notki dla etykiety opisowej, Git uruchomi twój "
"edytor tekstu gdzie będziesz mógł ją dodać."

#: 01-chapter2.markdown:885
msgid ""
"You can see the tag data along with the commit that was tagged by using the "
"`git show` command:"
msgstr ""
"Dane etykiety wraz z tagowaną rewizją możesz zobaczyć używając polecenia "
"`git show`:"

#: 01-chapter2.markdown:887
msgid ""
"\t$ git show v1.4\n"
"\ttag v1.4\n"
"\tTagger: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Feb 9 14:45:11 2009 -0800"
msgstr ""
"\t$ git show v1.4\n"
"\ttag v1.4\n"
"\tTagger: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Feb 9 14:45:11 2009 -0800"

#: 01-chapter2.markdown:892
msgid ""
"\tmy version 1.4\n"
"\tcommit 15027957951b64cf874c3557a0f3547bd83b3ff6\n"
"\tMerge: 4a447f7... a6b4c97...\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sun Feb 8 19:02:46 2009 -0800"
msgstr ""
"\tmy version 1.4\n"
"\tcommit 15027957951b64cf874c3557a0f3547bd83b3ff6\n"
"\tMerge: 4a447f7... a6b4c97...\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sun Feb 8 19:02:46 2009 -0800"

#: 01-chapter2.markdown:898
msgctxt "01-chapter2.markdown:898"
msgid "\t    Merge branch 'experiment'"
msgstr "\t    Merge branch 'experiment'"

#: 01-chapter2.markdown:900
msgid ""
"That shows the tagger information, the date the commit was tagged, and the "
"annotation message before showing the commit information."
msgstr ""
"Jak widać została wyświetlona informacja o osobie etykietującej, data "
"stworzenia etykiety, oraz notka poprzedzająca informacje o rewizji:"

#: 01-chapter2.markdown:902
msgid "### Signed Tags ###"
msgstr "### Podpisane etykiety ###"

#: 01-chapter2.markdown:904
msgid ""
"You can also sign your tags with GPG, assuming you have a private key. All "
"you have to do is use `-s` instead of `-a`:"
msgstr ""
"Swoją etykietę możesz podpisać prywatnym kluczem używając GPG. Wystarczy w "
"tym celu użyć parametru `-s` zamiast `-a`:"

#: 01-chapter2.markdown:906
msgid ""
"\t$ git tag -s v1.5 -m 'my signed 1.5 tag'\n"
"\tYou need a passphrase to unlock the secret key for\n"
"\tuser: \"Scott Chacon <schacon@gee-mail.com>\"\n"
"\t1024-bit DSA key, ID F721C45A, created 2009-02-09"
msgstr ""
"\t$ git tag -s v1.5 -m 'my signed 1.5 tag'\n"
"\tYou need a passphrase to unlock the secret key for\n"
"\tuser: \"Scott Chacon <schacon@gee-mail.com>\"\n"
"\t1024-bit DSA key, ID F721C45A, created 2009-02-09"

#: 01-chapter2.markdown:911
msgid ""
"If you run `git show` on that tag, you can see your GPG signature attached "
"to it:"
msgstr ""
"Po uruchomieniu na etykiecie polecenia `git show`, zobaczysz, że został "
"dołączony do niej podpis GPG:"

#: 01-chapter2.markdown:913
msgid ""
"\t$ git show v1.5\n"
"\ttag v1.5\n"
"\tTagger: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Feb 9 15:22:20 2009 -0800"
msgstr ""
"\t$ git show v1.5\n"
"\ttag v1.5\n"
"\tTagger: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Feb 9 15:22:20 2009 -0800"

#: 01-chapter2.markdown:918
msgid ""
"\tmy signed 1.5 tag\n"
"\t-----BEGIN PGP SIGNATURE-----\n"
"\tVersion: GnuPG v1.4.8 (Darwin)"
msgstr ""
"\tmy signed 1.5 tag\n"
"\t-----BEGIN PGP SIGNATURE-----\n"
"\tVersion: GnuPG v1.4.8 (Darwin)"

#: 01-chapter2.markdown:922
msgid ""
"\tiEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN\n"
"\tKi0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/\n"
"\t=WryJ\n"
"\t-----END PGP SIGNATURE-----\n"
"\tcommit 15027957951b64cf874c3557a0f3547bd83b3ff6\n"
"\tMerge: 4a447f7... a6b4c97...\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sun Feb 8 19:02:46 2009 -0800"
msgstr ""
"\tiEYEABECAAYFAkmQurIACgkQON3DxfchxFr5cACeIMN+ZxLKggJQf0QYiQBwgySN\n"
"\tKi0An2JeAVUCAiJ7Ox6ZEtK+NvZAj82/\n"
"\t=WryJ\n"
"\t-----END PGP SIGNATURE-----\n"
"\tcommit 15027957951b64cf874c3557a0f3547bd83b3ff6\n"
"\tMerge: 4a447f7... a6b4c97...\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sun Feb 8 19:02:46 2009 -0800"

#: 01-chapter2.markdown:931
msgctxt "01-chapter2.markdown:931"
msgid "\t    Merge branch 'experiment'"
msgstr "\t    Merge branch 'experiment'"

#: 01-chapter2.markdown:933
msgid "A bit later, you’ll learn how to verify signed tags."
msgstr ""
"Nieco później, zobaczysz w jaki sposób można weryfikować podpisane etykiety."

#: 01-chapter2.markdown:935
msgid "### Lightweight Tags ###"
msgstr "### Etykiety lekkie ###"

#: 01-chapter2.markdown:937
msgid ""
"Another way to tag commits is with a lightweight tag. This is basically the "
"commit checksum stored in a file — no other information is kept. To create a "
"lightweight tag, don’t supply the `-a`, `-s`, or `-m` option:"
msgstr ""
"Innym sposobem na tagowanie rewizji są etykiety lekkie. Jest to w rzeczy "
"samej suma kontrolna rewizji przechowywana w pliku - nie są przechowywane "
"żadne inne, dodatkowe informacje. Aby stworzyć lekką etykietę, nie przekazuj "
"do polecenia tag żadnego z parametrów `-a`, `-s` czy `-m`:"

#: 01-chapter2.markdown:939
msgid ""
"\t$ git tag v1.4-lw\n"
"\t$ git tag\n"
"\tv0.1\n"
"\tv1.3\n"
"\tv1.4\n"
"\tv1.4-lw\n"
"\tv1.5"
msgstr ""
"\t$ git tag v1.4-lw\n"
"\t$ git tag\n"
"\tv0.1\n"
"\tv1.3\n"
"\tv1.4\n"
"\tv1.4-lw\n"
"\tv1.5"

#: 01-chapter2.markdown:947
msgid ""
"This time, if you run `git show` on the tag, you don’t see the extra tag "
"information. The command just shows the commit:"
msgstr ""
"Uruchamiając teraz na etykiecie `git show` nie zobaczysz żadnych dodatkowych "
"informacji. Polecenie wyświetli jedynie:"

#: 01-chapter2.markdown:949
msgid ""
"\t$ git show v1.4-lw\n"
"\tcommit 15027957951b64cf874c3557a0f3547bd83b3ff6\n"
"\tMerge: 4a447f7... a6b4c97...\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sun Feb 8 19:02:46 2009 -0800"
msgstr ""
"\t$ git show v1.4-lw\n"
"\tcommit 15027957951b64cf874c3557a0f3547bd83b3ff6\n"
"\tMerge: 4a447f7... a6b4c97...\n"
"\tAuthor: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Sun Feb 8 19:02:46 2009 -0800"

#: 01-chapter2.markdown:955
msgctxt "01-chapter2.markdown:955"
msgid "\t    Merge branch 'experiment'"
msgstr "\t    Merge branch 'experiment'"

#: 01-chapter2.markdown:957
msgid "### Verifying Tags ###"
msgstr "### Weryfikowanie etykiet ###"

#: 01-chapter2.markdown:959
msgid ""
"To verify a signed tag, you use `git tag -v [tag-name]`. This command uses "
"GPG to verify the signature. You need the signer’s public key in your "
"keyring for this to work properly:"
msgstr ""
"Do weryfikacji etykiety używa się polecenia `git tag -v [nazwa-etykiety]`. "
"Polecenie używa GPG do zweryfikowania podpisu. Żeby mogło zadziałać "
"poprawnie potrzebujesz oczywiście publicznego klucza osoby podpisującej w "
"swoim keyring-u:"

#: 01-chapter2.markdown:961
msgid ""
"\t$ git tag -v v1.4.2.1\n"
"\tobject 883653babd8ee7ea23e6a5c392bb739348b1eb61\n"
"\ttype commit\n"
"\ttag v1.4.2.1\n"
"\ttagger Junio C Hamano <junkio@cox.net> 1158138501 -0700"
msgstr ""
"\t$ git tag -v v1.4.2.1\n"
"\tobject 883653babd8ee7ea23e6a5c392bb739348b1eb61\n"
"\ttype commit\n"
"\ttag v1.4.2.1\n"
"\ttagger Junio C Hamano <junkio@cox.net> 1158138501 -0700"

#: 01-chapter2.markdown:967
msgid "\tGIT 1.4.2.1"
msgstr "\tGIT 1.4.2.1"

#: 01-chapter2.markdown:969
msgid ""
"\tMinor fixes since 1.4.2, including git-mv and git-http with alternates.\n"
"\tgpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID "
"F3119B9A\n"
"\tgpg: Good signature from \"Junio C Hamano <junkio@cox.net>\"\n"
"\tgpg:                 aka \"[jpeg image of size 1513]\"\n"
"\tPrimary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A"
msgstr ""
"\tMinor fixes since 1.4.2, including git-mv and git-http with alternates.\n"
"\tgpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID "
"F3119B9A\n"
"\tgpg: Good signature from \"Junio C Hamano <junkio@cox.net>\"\n"
"\tgpg:                 aka \"[jpeg image of size 1513]\"\n"
"\tPrimary key fingerprint: 3565 2A26 2040 E066 C9A7  4A7D C0C6 D9A4 F311 9B9A"

#: 01-chapter2.markdown:975
msgid ""
"If you don’t have the signer’s public key, you get something like this "
"instead:"
msgstr ""
"Jeśli nie posiadasz klucza publicznego osoby podpisującej, otrzymasz "
"następujący komunikat:"

#: 01-chapter2.markdown:977
msgid ""
"\tgpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID "
"F3119B9A\n"
"\tgpg: Can't check signature: public key not found\n"
"\terror: could not verify the tag 'v1.4.2.1'"
msgstr ""
"\tgpg: Signature made Wed Sep 13 02:08:25 2006 PDT using DSA key ID "
"F3119B9A\n"
"\tgpg: Can't check signature: public key not found\n"
"\terror: could not verify the tag 'v1.4.2.1'"

#: 01-chapter2.markdown:981
msgid "### Tagging Later ###"
msgstr "### Etykietowanie historii ###"

#: 01-chapter2.markdown:983
msgid ""
"You can also tag commits after you’ve moved past them. Suppose your commit "
"history looks like this:"
msgstr ""
"Możesz także etykietować historyczne rewizje. Załóżmy, że historia zmian "
"wygląda następująco:"

#: 01-chapter2.markdown:985
msgid ""
"\t$ git log --pretty=oneline\n"
"\t15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'\n"
"\ta6b4c97498bd301d84096da251c98a07c7723e65 beginning write support\n"
"\t0d52aaab4479697da7686c15f77a3d64d9165190 one more thing\n"
"\t6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'\n"
"\t0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function\n"
"\t4682c3261057305bdd616e23b64b0857d832627b added a todo file\n"
"\t166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n"
"\t9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n"
"\t964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\n"
"\t8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme"
msgstr ""
"\t$ git log --pretty=oneline\n"
"\t15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'\n"
"\ta6b4c97498bd301d84096da251c98a07c7723e65 beginning write support\n"
"\t0d52aaab4479697da7686c15f77a3d64d9165190 one more thing\n"
"\t6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'\n"
"\t0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function\n"
"\t4682c3261057305bdd616e23b64b0857d832627b added a todo file\n"
"\t166ae0c4d3f420721acbb115cc33848dfcc2121a started write support\n"
"\t9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile\n"
"\t964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo\n"
"\t8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme"

#: 01-chapter2.markdown:997
msgid ""
"Now, suppose you forgot to tag the project at v1.2, which was at the "
"\"updated rakefile\" commit. You can add it after the fact. To tag that "
"commit, you specify the commit checksum (or part of it) at the end of the "
"command:"
msgstr ""
"Teraz, załóżmy, że zapomniałeś oznaczyć projektu jako wersja 1.2, do której "
"przeszedł on wraz z rewizją \"updated rakefile\". Możesz dodać etykietę już "
"po fakcie. W tym celu wystarczy na końcu polecenia `git tag` podać sumę "
"kontrolną lub jej część wskazującą na odpowiednią rewizję:"

#: 01-chapter2.markdown:999
msgid "\t$ git tag -a v1.2 9fceb02"
msgstr "\t$ git tag -a v1.2 9fceb02"

#: 01-chapter2.markdown:1001
msgid "You can see that you’ve tagged the commit:"
msgstr "Aby sprawdzić czy etykieta została stworzona wpisz:"

#: 01-chapter2.markdown:1003
msgid ""
"\t$ git tag \n"
"\tv0.1\n"
"\tv1.2\n"
"\tv1.3\n"
"\tv1.4\n"
"\tv1.4-lw\n"
"\tv1.5"
msgstr ""
"\t$ git tag \n"
"\tv0.1\n"
"\tv1.2\n"
"\tv1.3\n"
"\tv1.4\n"
"\tv1.4-lw\n"
"\tv1.5"

#: 01-chapter2.markdown:1011
msgid ""
"\t$ git show v1.2\n"
"\ttag v1.2\n"
"\tTagger: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Feb 9 15:32:16 2009 -0800"
msgstr ""
"\t$ git show v1.2\n"
"\ttag v1.2\n"
"\tTagger: Scott Chacon <schacon@gee-mail.com>\n"
"\tDate:   Mon Feb 9 15:32:16 2009 -0800"

#: 01-chapter2.markdown:1016
msgid ""
"\tversion 1.2\n"
"\tcommit 9fceb02d0ae598e95dc970b74767f19372d61af8\n"
"\tAuthor: Magnus Chacon <mchacon@gee-mail.com>\n"
"\tDate:   Sun Apr 27 20:43:35 2008 -0700"
msgstr ""
"\tversion 1.2\n"
"\tcommit 9fceb02d0ae598e95dc970b74767f19372d61af8\n"
"\tAuthor: Magnus Chacon <mchacon@gee-mail.com>\n"
"\tDate:   Sun Apr 27 20:43:35 2008 -0700"

#: 01-chapter2.markdown:1021
msgid ""
"\t    updated rakefile\n"
"\t..."
msgstr ""
"\t    updated rakefile\n"
"\t..."

#: 01-chapter2.markdown:1024
msgid "### Sharing Tags ###"
msgstr "### Współdzielenie etykiet ###"

#: 01-chapter2.markdown:1026
msgid ""
"By default, the `git push` command doesn’t transfer tags to remote servers. "
"You will have to explicitly push tags to a shared server after you have "
"created them.  This process is just like sharing remote branches – you can "
"run `git push origin [tagname]`."
msgstr ""
"Domyślnie, polecenie `git push` nie przesyła twoich etykiet do zdalnego "
"repozytorium. Będziesz musiał osobno wypchnąć na współdzielony serwer "
"stworzone etykiety. Proces ten jest podobny do współdzielenia gałęzi i "
"polega na uruchomieniu `git push origin [nazwa-etykiety]`."

#: 01-chapter2.markdown:1028
msgid ""
"\t$ git push origin v1.5\n"
"\tCounting objects: 50, done.\n"
"\tCompressing objects: 100% (38/38), done.\n"
"\tWriting objects: 100% (44/44), 4.56 KiB, done.\n"
"\tTotal 44 (delta 18), reused 8 (delta 1)\n"
"\tTo git@github.com:schacon/simplegit.git\n"
"\t* [new tag]         v1.5 -> v1.5"
msgstr ""
"\t$ git push origin v1.5\n"
"\tCounting objects: 50, done.\n"
"\tCompressing objects: 100% (38/38), done.\n"
"\tWriting objects: 100% (44/44), 4.56 KiB, done.\n"
"\tTotal 44 (delta 18), reused 8 (delta 1)\n"
"\tTo git@github.com:schacon/simplegit.git\n"
"\t* [new tag]         v1.5 -> v1.5"

#: 01-chapter2.markdown:1036
msgid ""
"If you have a lot of tags that you want to push up at once, you can also use "
"the `--tags` option to the `git push` command.  This will transfer all of "
"your tags to the remote server that are not already there."
msgstr ""
"Jeśli masz mnóstwo tagów, którymi chciałbyś się podzielić z innymi, możesz "
"je wszystkie wypchnąć jednocześnie dodając do `git push` opcję `--tags`. W "
"ten sposób zostaną przesłane wszystkie tagi, których nie ma jeszcze na "
"serwerze."

#: 01-chapter2.markdown:1038
msgid ""
"\t$ git push origin --tags\n"
"\tCounting objects: 50, done.\n"
"\tCompressing objects: 100% (38/38), done.\n"
"\tWriting objects: 100% (44/44), 4.56 KiB, done.\n"
"\tTotal 44 (delta 18), reused 8 (delta 1)\n"
"\tTo git@github.com:schacon/simplegit.git\n"
"\t * [new tag]         v0.1 -> v0.1\n"
"\t * [new tag]         v1.2 -> v1.2\n"
"\t * [new tag]         v1.4 -> v1.4\n"
"\t * [new tag]         v1.4-lw -> v1.4-lw\n"
"\t * [new tag]         v1.5 -> v1.5"
msgstr ""
"\t$ git push origin --tags\n"
"\tCounting objects: 50, done.\n"
"\tCompressing objects: 100% (38/38), done.\n"
"\tWriting objects: 100% (44/44), 4.56 KiB, done.\n"
"\tTotal 44 (delta 18), reused 8 (delta 1)\n"
"\tTo git@github.com:schacon/simplegit.git\n"
"\t * [new tag]         v0.1 -> v0.1\n"
"\t * [new tag]         v1.2 -> v1.2\n"
"\t * [new tag]         v1.4 -> v1.4\n"
"\t * [new tag]         v1.4-lw -> v1.4-lw\n"
"\t * [new tag]         v1.5 -> v1.5"

#: 01-chapter2.markdown:1050
msgid ""
"Now, when someone else clones or pulls from your repository, they will get "
"all your tags as well."
msgstr ""
"Jeśli ktokolwiek inny sklonuje lub pobierze zmiany teraz z twojego "
"repozytorium, dostanie także wszystkie twoje etykiety."

#: 01-chapter2.markdown:1052
msgid "## Tips and Tricks ##"
msgstr "## Sztuczki i kruczki ##"

#: 01-chapter2.markdown:1054
msgid ""
"Before we finish this chapter on basic Git, a few little tips and tricks may "
"make your Git experience a bit simpler, easier, or more familiar. Many "
"people use Git without using any of these tips, and we won’t refer to them "
"or assume you’ve used them later in the book; but you should probably know "
"how to do them."
msgstr ""
"Zanim zamkniemy ten rozdział, pokażemy kilka sztuczek, które uczynią twoją "
"pracę prostszą, łatwiejszą i przyjemniejszą. Wielu ludzi używa Gita nie "
"korzystając z przytoczonych tutaj porad, ty też nie musisz, ale przynajmniej "
"powinieneś o nich wiedzieć."

#: 01-chapter2.markdown:1056
msgid "### Auto-Completion ###"
msgstr "### Auto-uzupełnianie ###"

#: 01-chapter2.markdown:1058
msgid ""
"If you use the Bash shell, Git comes with a nice auto-completion script you "
"can enable. Download the Git source code, and look in the `contrib/"
"completion` directory; there should be a file called `git-completion.bash`. "
"Copy this file to your home directory, and add this to your `.bashrc` file:"
msgstr ""
"Jeśli używasz powłoki Bash, Git jest wyposażony w poręczny skrypt auto-"
"uzupełniania. Pobierz kod źródłowy Gita i zajrzyj do katalogu `contrib/"
"completion`. Powinieneś znaleźć tam plik o nazwie `git-completion.bash`. "
"Skopiuj go do swojego katalogu domowego i dodaj do `.bashrc` następującą "
"linijkę:"

#: 01-chapter2.markdown:1060
msgid "\tsource ~/.git-completion.bash"
msgstr "\tsource ~/.git-completion.bash"

#: 01-chapter2.markdown:1062
msgid ""
"If you want to set up Git to automatically have Bash shell completion for "
"all users, copy this script to the `/opt/local/etc/bash_completion.d` "
"directory on Mac systems or to the `/etc/bash_completion.d/` directory on "
"Linux systems. This is a directory of scripts that Bash will automatically "
"load to provide shell completions."
msgstr ""
"Jeśli chcesz ustawić Gita tak, żeby automatycznie pozwalał na auto-"
"uzupełnianie wszystkim użytkownikom, skopiuj wymieniony skrypt do katalogu `/"
"opt/local/etc/bash_completion.d` na systamach Mac, lub do `/etc/"
"bash_completion.d/` w Linuxie. Jest to katalog skryptów ładowanych "
"automatycznie przez Basha, dzięki czemu opcja zostanie włączona wszystkim "
"użytkownikom."

#: 01-chapter2.markdown:1064
msgid ""
"If you’re using Windows with Git Bash, which is the default when installing "
"Git on Windows with msysGit, auto-completion should be preconfigured."
msgstr ""
"Jeśli używasz Windows wraz z narzędziem Git Bash, które jest domyślnie "
"instalowane wraz wraz z msysGit, auto-uzupełnianie powinno być pre-"
"konfigurowane i dostępne od razu."

#: 01-chapter2.markdown:1066
msgid ""
"Press the Tab key when you’re writing a Git command, and it should return a "
"set of suggestions for you to pick from:"
msgstr ""
"Wciśnij klawisz Tab podczas wpisywania komendy Gita, a powinieneś ujrzeć "
"zestaw podpowiedzi do wyboru:"

#: 01-chapter2.markdown:1068
msgid ""
"\t$ git co<tab><tab>\n"
"\tcommit config"
msgstr ""
"\t$ git co<tab><tab>\n"
"\tcommit config"

#: 01-chapter2.markdown:1071
msgid ""
"In this case, typing git co and then pressing the Tab key twice suggests "
"commit and config. Adding `m<tab>` completes `git commit` automatically."
msgstr ""
"W tym wypadku wpisanie git co i wciśnięcie Tab dwukrotnie podpowiada "
"operacje commit oraz config. Dodanie kolejnej literki m i wciśnięcie Tab "
"uzupełni automatycznie polecenie do `git commit`."

#: 01-chapter2.markdown:1073
msgid ""
"This also works with options, which is probably more useful. For instance, "
"if you’re running a `git log` command and can’t remember one of the options, "
"you can start typing it and press Tab to see what matches:"
msgstr ""
"Podobnie jest z opcjami, co pewnie przyda ci się znacznie częściej. Na "
"przykład jeżeli chcesz uruchomić polecenie `git log` i nie pamiętasz jednej "
"z opcji, zacznij ją wpisywać i wciśnij Tab aby zobaczyć sugestie:"

#: 01-chapter2.markdown:1075
msgid ""
"\t$ git log --s<tab>\n"
"\t--shortstat  --since=  --src-prefix=  --stat   --summary"
msgstr ""
"\t$ git log --s<tab>\n"
"\t--shortstat  --since=  --src-prefix=  --stat   --summary"

#: 01-chapter2.markdown:1078
msgid ""
"That’s a pretty nice trick and may save you some time and documentation "
"reading."
msgstr ""
"Jest to bardzo przydatna możliwość pozwalająca na zaoszczędzenie mnóstwa "
"czasu spędzonego na czytaniu dokumentacji."

#: 01-chapter2.markdown:1080
msgid "### Git Aliases ###"
msgstr "### Aliasy ###"

#: 01-chapter2.markdown:1082
msgid ""
"Git doesn’t infer your command if you type it in partially. If you don’t "
"want to type the entire text of each of the Git commands, you can easily set "
"up an alias for each command using `git config`. Here are a couple of "
"examples you may want to set up:"
msgstr ""
"Git nie wydedukuje sam polecenia jeśli wpiszesz je częściowo i wciśniesz "
"Enter. Jeśli nie chcesz w całości wpisywać całego tekstu polecenia możesz "
"łatwo stworzyć dla niego alias używając `git config`. Oto kilka przykładów, "
"które mogą ci się przydać: "

#: 01-chapter2.markdown:1084
msgid ""
"\t$ git config --global alias.co checkout\n"
"\t$ git config --global alias.br branch\n"
"\t$ git config --global alias.ci commit\n"
"\t$ git config --global alias.st status"
msgstr ""
"\t$ git config --global alias.co checkout\n"
"\t$ git config --global alias.br branch\n"
"\t$ git config --global alias.ci commit\n"
"\t$ git config --global alias.st status"

#: 01-chapter2.markdown:1089
msgid ""
"This means that, for example, instead of typing `git commit`, you just need "
"to type `git ci`. As you go on using Git, you’ll probably use other commands "
"frequently as well; in this case, don’t hesitate to create new aliases."
msgstr ""
"Oznacza to, że na przykład, zamiast wpisywać `git commit`, wystarczy, że "
"wpiszesz `git ci`. Z czasem zaczniesz też stosować także inne komendy "
"regularnie, nie wahaj się wówczas tworzyć sobie dla nich nowych aliasów."

#: 01-chapter2.markdown:1091
msgid ""
"This technique can also be very useful in creating commands that you think "
"should exist. For example, to correct the usability problem you encountered "
"with unstaging a file, you can add your own unstage alias to Git:"
msgstr ""
"Technika ta jest także bardzo przydatna do tworzenia poleceń, które uważasz, "
"że powinny istnieć a których brakuje ci w zwięzłej formie. Na przykład, aby "
"skorygować problem z intuicyjnością obsługi usuwania plików z poczekalni, "
"możesz dodać do Gita własny, ułatwiający to alias:"

#: 01-chapter2.markdown:1093
msgid "\t$ git config --global alias.unstage 'reset HEAD --'"
msgstr "\t$ git config --global alias.unstage 'reset HEAD --'"

#: 01-chapter2.markdown:1095
msgid "This makes the following two commands equivalent:"
msgstr "W ten sposób dwie poniższe komendy są sobie równoważne:"

#: 01-chapter2.markdown:1097
msgid ""
"\t$ git unstage fileA\n"
"\t$ git reset HEAD fileA"
msgstr ""
"\t$ git unstage fileA\n"
"\t$ git reset HEAD fileA"

#: 01-chapter2.markdown:1100
msgid ""
"This seems a bit clearer. It’s also common to add a `last` command, like "
"this:"
msgstr ""
"Od razu polecenie wygląda lepiej. Dość częstą praktyką jest także dodawanie "
"komendy `last`:"

#: 01-chapter2.markdown:1102
msgid "\t$ git config --global alias.last 'log -1 HEAD'"
msgstr "\t$ git config --global alias.last 'log -1 HEAD'"

#: 01-chapter2.markdown:1104
msgid "This way, you can see the last commit easily:"
msgstr "Możesz dzięki niemu łatwo zobaczyć ostatnią rewizję:"

#: 01-chapter2.markdown:1106
msgid ""
"\t$ git last\n"
"\tcommit 66938dae3329c7aebe598c2246a8e6af90d04646\n"
"\tAuthor: Josh Goebel <dreamer3@example.com>\n"
"\tDate:   Tue Aug 26 19:48:51 2008 +0800"
msgstr ""
"\t$ git last\n"
"\tcommit 66938dae3329c7aebe598c2246a8e6af90d04646\n"
"\tAuthor: Josh Goebel <dreamer3@example.com>\n"
"\tDate:   Tue Aug 26 19:48:51 2008 +0800"

#: 01-chapter2.markdown:1111
msgid "\t    test for current head"
msgstr "\t    test for current head"

#: 01-chapter2.markdown:1113
msgid "\t    Signed-off-by: Scott Chacon <schacon@example.com>"
msgstr "\t    Signed-off-by: Scott Chacon <schacon@example.com>"

#: 01-chapter2.markdown:1115
msgid ""
"As you can tell, Git simply replaces the new command with whatever you alias "
"it for. However, maybe you want to run an external command, rather than a "
"Git subcommand. In that case, you start the command with a `!` character. "
"This is useful if you write your own tools that work with a Git repository. "
"We can demonstrate by aliasing `git visual` to run `gitk`:"
msgstr ""
"Jak można zauważyć, Git zastępuje nową komendę czymkolwiek co do niej "
"przypiszesz. Jednakże, możesz chcieć także uruchomić zewnętrzne polecenie "
"zamiast komendy Gita. Rozpocznij je wówczas znakiem wykrzyknika `!`. "
"Przydaje się to podczas tworzenia własnego narzędzia, które współpracuje z "
"repozytorium Gita. Możemy pokazać to na przykładzie aliasu `git visual` "
"uruchamiającego `gitk`:"

#: 01-chapter2.markdown:1117
msgid "\t$ git config --global alias.visual \"!gitk\""
msgstr "\t$ git config --global alias.visual \"!gitzk\""

#: 01-chapter2.markdown:1119
msgid "## Summary ##"
msgstr "## Podsumowanie ##"

#: 01-chapter2.markdown:1121
msgid ""
"At this point, you can do all the basic local Git operations — creating or "
"cloning a repository, making changes, staging and committing those changes, "
"and viewing the history of all the changes the repository has been through. "
"Next, we’ll cover Git’s killer feature: its branching model."
msgstr ""
"Umiesz już pracować z wszystkimi najważniejszymi, lokalnymi poleceniami Gita "
"- tworzyć i klonować repozytoria, dokonywać zmian, umieszczać je w "
"poczekalni i zatwierdzać do rewizji oraz przeglądać historię repozytorium. W "
"dalszej kolejności zajmiemy się jedną z kluczowych możliwości Gita: modelem "
"gałęzi."
